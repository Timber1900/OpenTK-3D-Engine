Index: Program/obj/Release/netcoreapp3.1/Program.AssemblyInfo.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//------------------------------------------------------------------------------\r\n// <auto-generated>\r\n//     This code was generated by a tool.\r\n//     Runtime Version:4.0.30319.42000\r\n//\r\n//     Changes to this file may cause incorrect behavior and will be lost if\r\n//     the code is regenerated.\r\n// </auto-generated>\r\n//------------------------------------------------------------------------------\r\n\r\nusing System;\r\nusing System.Reflection;\r\n\r\n[assembly: System.Reflection.AssemblyCompanyAttribute(\"Hugo Humberto Martins Teixeira\")]\r\n[assembly: System.Reflection.AssemblyConfigurationAttribute(\"Release\")]\r\n[assembly: System.Reflection.AssemblyDescriptionAttribute(\"OpenTK 3D/2D engine, very fast for both 3D and 2D applications.\\r\\n\\r\\nDocumentation \" +\r\n    \"at https://www.nuget.org/packages/OpenTK.3D.Library\")]\r\n[assembly: System.Reflection.AssemblyFileVersionAttribute(\"1.7.4.0\")]\r\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"1.7.4\")]\r\n[assembly: System.Reflection.AssemblyProductAttribute(\"3D Engine\")]\r\n[assembly: System.Reflection.AssemblyTitleAttribute(\"Program\")]\r\n[assembly: System.Reflection.AssemblyVersionAttribute(\"1.7.4.0\")]\r\n\r\n// Generated by the MSBuild WriteCodeFragment class.\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Program/obj/Release/netcoreapp3.1/Program.AssemblyInfo.cs	(revision cb0a3442d5c36152c334a82b3a1b39ee4d1ba2cb)
+++ Program/obj/Release/netcoreapp3.1/Program.AssemblyInfo.cs	(date 1604253674317)
@@ -1,7 +1,6 @@
 //------------------------------------------------------------------------------
 // <auto-generated>
 //     This code was generated by a tool.
-//     Runtime Version:4.0.30319.42000
 //
 //     Changes to this file may cause incorrect behavior and will be lost if
 //     the code is regenerated.
Index: Program/obj/project.packagespec.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"version\": \"1.7.0\",\r\n  \"restore\": {\r\n    \"projectUniqueName\": \"C:\\\\Users\\\\35196\\\\source\\\\repos\\\\OpenTK3DEngine\\\\Program\\\\Program.csproj\",\r\n    \"projectName\": \"OpenTK.3D.Library\",\r\n    \"projectPath\": \"C:\\\\Users\\\\35196\\\\source\\\\repos\\\\OpenTK3DEngine\\\\Program\\\\Program.csproj\",\r\n    \"outputPath\": \"C:\\\\Users\\\\35196\\\\source\\\\repos\\\\OpenTK3DEngine\\\\Program\\\\obj\\\\\",\r\n    \"projectStyle\": \"PackageReference\",\r\n    \"crossTargeting\": true,\r\n    \"fallbackFolders\": [\r\n      \"C:\\\\Program Files\\\\dotnet\\\\sdk\\\\NuGetFallbackFolder\"\r\n    ],\r\n    \"originalTargetFrameworks\": [\r\n      \"netcoreapp2.1\",\r\n      \"netcoreapp3.1\"\r\n    ],\r\n    \"sources\": {\r\n      \"C:\\\\Program Files (x86)\\\\Microsoft SDKs\\\\NuGetPackages\\\\\": {},\r\n      \"https://api.nuget.org/v3/index.json\": {}\r\n    },\r\n    \"frameworks\": {\r\n      \"netcoreapp2.1\": {\r\n        \"projectReferences\": {}\r\n      },\r\n      \"netcoreapp3.1\": {\r\n        \"projectReferences\": {}\r\n      }\r\n    },\r\n    \"warningProperties\": {\r\n      \"warnAsError\": [\r\n        \"NU1605\"\r\n      ]\r\n    }\r\n  },\r\n  \"frameworks\": {\r\n    \"netcoreapp2.1\": {\r\n      \"dependencies\": {\r\n        \"Microsoft.NETCore.App\": {\r\n          \"suppressParent\": \"All\",\r\n          \"target\": \"Package\",\r\n          \"version\": \"[2.1.0, )\",\r\n          \"autoReferenced\": true\r\n        },\r\n        \"Microsoft.Win32.SystemEvents\": {\r\n          \"target\": \"Package\",\r\n          \"version\": \"[4.7.0, )\"\r\n        },\r\n        \"Newtonsoft.Json\": {\r\n          \"target\": \"Package\",\r\n          \"version\": \"[12.0.3, )\"\r\n        },\r\n        \"OpenTK\": {\r\n          \"target\": \"Package\",\r\n          \"version\": \"[3.2.0, )\"\r\n        },\r\n        \"SixLabors.ImageSharp\": {\r\n          \"target\": \"Package\",\r\n          \"version\": \"[1.0.1, )\"\r\n        },\r\n        \"System.Drawing.Common\": {\r\n          \"target\": \"Package\",\r\n          \"version\": \"[4.7.0, )\"\r\n        }\r\n      },\r\n      \"imports\": [\r\n        \"net461\",\r\n        \"net462\",\r\n        \"net47\",\r\n        \"net471\",\r\n        \"net472\",\r\n        \"net48\"\r\n      ],\r\n      \"assetTargetFallback\": true,\r\n      \"warn\": true,\r\n      \"runtimeIdentifierGraphPath\": \"C:\\\\Program Files\\\\dotnet\\\\sdk\\\\3.1.402\\\\RuntimeIdentifierGraph.json\"\r\n    },\r\n    \"netcoreapp3.1\": {\r\n      \"dependencies\": {\r\n        \"Microsoft.Win32.SystemEvents\": {\r\n          \"target\": \"Package\",\r\n          \"version\": \"[4.7.0, )\"\r\n        },\r\n        \"Newtonsoft.Json\": {\r\n          \"target\": \"Package\",\r\n          \"version\": \"[12.0.3, )\"\r\n        },\r\n        \"OpenTK\": {\r\n          \"target\": \"Package\",\r\n          \"version\": \"[3.2.0, )\"\r\n        },\r\n        \"SixLabors.ImageSharp\": {\r\n          \"target\": \"Package\",\r\n          \"version\": \"[1.0.1, )\"\r\n        },\r\n        \"System.Drawing.Common\": {\r\n          \"target\": \"Package\",\r\n          \"version\": \"[4.7.0, )\"\r\n        }\r\n      },\r\n      \"imports\": [\r\n        \"net461\",\r\n        \"net462\",\r\n        \"net47\",\r\n        \"net471\",\r\n        \"net472\",\r\n        \"net48\"\r\n      ],\r\n      \"assetTargetFallback\": true,\r\n      \"warn\": true,\r\n      \"frameworkReferences\": {\r\n        \"Microsoft.NETCore.App\": {\r\n          \"privateAssets\": \"all\"\r\n        }\r\n      },\r\n      \"runtimeIdentifierGraphPath\": \"C:\\\\Program Files\\\\dotnet\\\\sdk\\\\3.1.402\\\\RuntimeIdentifierGraph.json\"\r\n    }\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Program/obj/project.packagespec.json	(revision cb0a3442d5c36152c334a82b3a1b39ee4d1ba2cb)
+++ Program/obj/project.packagespec.json	(date 1604253674521)
@@ -1,5 +1,5 @@
 {
-  "version": "1.7.0",
+  "version": "1.7.4",
   "restore": {
     "projectUniqueName": "C:\\Users\\35196\\source\\repos\\OpenTK3DEngine\\Program\\Program.csproj",
     "projectName": "OpenTK.3D.Library",
Index: .idea/.idea.OpenTK/.idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoGeneratedRunConfigurationManager\">\r\n    <projectFile>Program/Program.csproj</projectFile>\r\n    <projectFile>Game/Game.csproj</projectFile>\r\n  </component>\r\n  <component name=\"BranchesTreeState\">\r\n    <expand>\r\n      <path>\r\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"LOCAL_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n      </path>\r\n      <path>\r\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"REMOTE_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n      </path>\r\n      <path>\r\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"REMOTE_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"GROUP_NODE:origin\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n      </path>\r\n    </expand>\r\n    <select />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"c3dcaea8-337b-400d-b616-a33adbf7aef1\" name=\"Default Changelist\" comment=\"Updated README.md\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/.idea.OpenTK/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/.idea.OpenTK/.idea/workspace.xml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"HighlightingSettingsPerFile\">\r\n    <setting file=\"file://$PROJECT_DIR$/Program/MainRenderWindow.cs\" root0=\"FORCE_HIGHLIGHTING\" />\r\n  </component>\r\n  <component name=\"IdeDocumentHistory\">\r\n    <option name=\"CHANGED_PATHS\">\r\n      <list>\r\n        <option value=\"$PROJECT_DIR$/Program/bin/Debug/netcoreapp3.1/Shaders/shader2d.vert\" />\r\n        <option value=\"$PROJECT_DIR$/Program/bin/Debug/netcoreapp3.1/Shaders/shader2d.frag\" />\r\n        <option value=\"$PROJECT_DIR$/Program/Game.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Program/Final.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Game/Program.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Game/Game.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Program/Texture.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Shaders/test.resx\" />\r\n        <option value=\"$PROJECT_DIR$/Program/Shader.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Program/Shaders.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Program/MainRenderWindow.cs\" />\r\n        <option value=\"$PROJECT_DIR$/README.md\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"1hhW4e3zDaYRjSFh5R9AiEL75qQ\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"autoscrollToSource\" value=\"true\" />\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"ASKED_ADD_EXTERNAL_FILES\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\r\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\r\n    <property name=\"node.js.path.for.package.eslint\" value=\"project\" />\r\n    <property name=\"node.js.path.for.package.tslint\" value=\"project\" />\r\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\r\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"preferences.sourceCode.C#\" />\r\n    <property name=\"vue.rearranger.settings.migration\" value=\"true\" />\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Publish to folder.Main Release\">\r\n    <configuration name=\"Main Release\" type=\"DotNetFolderPublish\" factoryName=\"Publish to folder\" temporary=\"true\">\r\n      <riderPublish self_contained=\"true\" target_folder=\"$PROJECT_DIR$/Main Release\" target_framework=\"netcoreapp2.1\" uuid_high=\"-8205420224830422425\" uuid_low=\"-6786141174981661103\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Game\" type=\"DotNetProject\" factoryName=\".NET Project\">\r\n      <option name=\"EXE_PATH\" value=\"\" />\r\n      <option name=\"PROGRAM_PARAMETERS\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"PASS_PARENT_ENVS\" value=\"1\" />\r\n      <option name=\"USE_EXTERNAL_CONSOLE\" value=\"0\" />\r\n      <option name=\"USE_MONO\" value=\"0\" />\r\n      <option name=\"RUNTIME_ARGUMENTS\" value=\"\" />\r\n      <option name=\"PROJECT_PATH\" value=\"$PROJECT_DIR$/Game/Game.csproj\" />\r\n      <option name=\"PROJECT_EXE_PATH_TRACKING\" value=\"1\" />\r\n      <option name=\"PROJECT_ARGUMENTS_TRACKING\" value=\"1\" />\r\n      <option name=\"PROJECT_WORKING_DIRECTORY_TRACKING\" value=\"1\" />\r\n      <option name=\"PROJECT_KIND\" value=\"DotNetCore\" />\r\n      <option name=\"PROJECT_TFM\" value=\"\" />\r\n      <method v=\"2\">\r\n        <option name=\"Build\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Program\" type=\"DotNetProject\" factoryName=\".NET Project\">\r\n      <option name=\"EXE_PATH\" value=\"$PROJECT_DIR$/Game/bin/Debug/netcoreapp2.1/Game.dll\" />\r\n      <option name=\"PROGRAM_PARAMETERS\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/Game/bin/Debug/netcoreapp2.1\" />\r\n      <option name=\"PASS_PARENT_ENVS\" value=\"1\" />\r\n      <option name=\"USE_EXTERNAL_CONSOLE\" value=\"0\" />\r\n      <option name=\"USE_MONO\" value=\"0\" />\r\n      <option name=\"RUNTIME_ARGUMENTS\" value=\"\" />\r\n      <option name=\"PROJECT_PATH\" value=\"$PROJECT_DIR$/Game/Game.csproj\" />\r\n      <option name=\"PROJECT_EXE_PATH_TRACKING\" value=\"1\" />\r\n      <option name=\"PROJECT_ARGUMENTS_TRACKING\" value=\"1\" />\r\n      <option name=\"PROJECT_WORKING_DIRECTORY_TRACKING\" value=\"1\" />\r\n      <option name=\"PROJECT_KIND\" value=\"Unloaded\" />\r\n      <option name=\"PROJECT_TFM\" value=\".NETCoreApp,Version=v2.1\" />\r\n      <method v=\"2\">\r\n        <option name=\"Build\" />\r\n      </method>\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\".NET Project.Game\" />\r\n      <item itemvalue=\".NET Project.Program\" />\r\n      <item itemvalue=\"Publish to folder.Main Release\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Publish to folder.Main Release\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"c3dcaea8-337b-400d-b616-a33adbf7aef1\" name=\"Default Changelist\" comment=\"\" />\r\n      <created>1600463617511</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1600463617511</updated>\r\n      <workItem from=\"1600463646984\" duration=\"187000\" />\r\n      <workItem from=\"1600466543859\" duration=\"605000\" />\r\n      <workItem from=\"1600467187832\" duration=\"5157000\" />\r\n      <workItem from=\"1600511288899\" duration=\"3698000\" />\r\n      <workItem from=\"1600515801183\" duration=\"604000\" />\r\n      <workItem from=\"1600521635939\" duration=\"56000\" />\r\n      <workItem from=\"1600521743208\" duration=\"2000\" />\r\n      <workItem from=\"1600522497899\" duration=\"1641000\" />\r\n      <workItem from=\"1600524310773\" duration=\"672000\" />\r\n      <workItem from=\"1600531116019\" duration=\"660000\" />\r\n      <workItem from=\"1600542246451\" duration=\"5329000\" />\r\n      <workItem from=\"1600549162809\" duration=\"672000\" />\r\n      <workItem from=\"1600601928856\" duration=\"414000\" />\r\n      <workItem from=\"1600795217327\" duration=\"1247000\" />\r\n      <workItem from=\"1600796583447\" duration=\"474000\" />\r\n      <workItem from=\"1602978317646\" duration=\"1437000\" />\r\n      <workItem from=\"1602981575031\" duration=\"1238000\" />\r\n      <workItem from=\"1602983550824\" duration=\"1011000\" />\r\n      <workItem from=\"1603278452423\" duration=\"28000\" />\r\n      <workItem from=\"1603837839107\" duration=\"1159000\" />\r\n      <workItem from=\"1604078351213\" duration=\"67000\" />\r\n      <workItem from=\"1604151432441\" duration=\"2233000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"drawEllipse fix\">\r\n      <created>1600524127878</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1600524127878</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Updated README.md\">\r\n      <created>1604153447899</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1604153447899</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"3\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"UnityProjectConfiguration\" hasMinimizedUI=\"false\" />\r\n  <component name=\"UnityUnitTestConfiguration\" currentTestLauncher=\"NUnit\" />\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <option name=\"CLEAR_INITIAL_COMMIT_MESSAGE\" value=\"true\" />\r\n    <MESSAGE value=\"drawEllipse fix\" />\r\n    <MESSAGE value=\"Updated README.md\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Updated README.md\" />\r\n  </component>\r\n  <component name=\"WindowStateProjectService\">\r\n    <state x=\"414\" y=\"174\" width=\"1092\" height=\"739\" key=\"#com.intellij.execution.impl.EditConfigurationsDialog\" timestamp=\"1602979705454\">\r\n      <screen x=\"0\" y=\"0\" width=\"1920\" height=\"1040\" />\r\n    </state>\r\n    <state x=\"414\" y=\"174\" width=\"1092\" height=\"739\" key=\"#com.intellij.execution.impl.EditConfigurationsDialog/0.0.1920.1040/1920.0.1920.1040@0.0.1920.1040\" timestamp=\"1602979705454\" />\r\n    <state width=\"1877\" height=\"282\" key=\"GridCell.Tab.0.bottom\" timestamp=\"1600514989541\">\r\n      <screen x=\"0\" y=\"0\" width=\"1920\" height=\"1040\" />\r\n    </state>\r\n    <state width=\"1877\" height=\"282\" key=\"GridCell.Tab.0.bottom/0.0.1920.1040/1920.0.1920.1040@0.0.1920.1040\" timestamp=\"1600514989541\" />\r\n    <state width=\"1877\" height=\"282\" key=\"GridCell.Tab.0.center\" timestamp=\"1600514989541\">\r\n      <screen x=\"0\" y=\"0\" width=\"1920\" height=\"1040\" />\r\n    </state>\r\n    <state width=\"1877\" height=\"282\" key=\"GridCell.Tab.0.center/0.0.1920.1040/1920.0.1920.1040@0.0.1920.1040\" timestamp=\"1600514989541\" />\r\n    <state width=\"1877\" height=\"282\" key=\"GridCell.Tab.0.left\" timestamp=\"1600514989540\">\r\n      <screen x=\"0\" y=\"0\" width=\"1920\" height=\"1040\" />\r\n    </state>\r\n    <state width=\"1877\" height=\"282\" key=\"GridCell.Tab.0.left/0.0.1920.1040/1920.0.1920.1040@0.0.1920.1040\" timestamp=\"1600514989540\" />\r\n    <state width=\"1877\" height=\"282\" key=\"GridCell.Tab.0.right\" timestamp=\"1600514989541\">\r\n      <screen x=\"0\" y=\"0\" width=\"1920\" height=\"1040\" />\r\n    </state>\r\n    <state width=\"1877\" height=\"282\" key=\"GridCell.Tab.0.right/0.0.1920.1040/1920.0.1920.1040@0.0.1920.1040\" timestamp=\"1600514989541\" />\r\n    <state x=\"552\" y=\"251\" key=\"Rider.ProjectTemplateDialog.Size\" timestamp=\"1600512321730\">\r\n      <screen x=\"0\" y=\"0\" width=\"1920\" height=\"1040\" />\r\n    </state>\r\n    <state x=\"552\" y=\"251\" key=\"Rider.ProjectTemplateDialog.Size/0.0.1920.1040/1920.0.1920.1040@0.0.1920.1040\" timestamp=\"1600512321730\" />\r\n    <state x=\"461\" y=\"164\" key=\"SettingsEditor\" timestamp=\"1600466624705\">\r\n      <screen x=\"0\" y=\"0\" width=\"1920\" height=\"1040\" />\r\n    </state>\r\n    <state x=\"461\" y=\"164\" key=\"SettingsEditor/0.0.1920.1040/1920.0.1920.1040@0.0.1920.1040\" timestamp=\"1600466624705\" />\r\n    <state x=\"92\" y=\"92\" width=\"1736\" height=\"856\" key=\"VCS.FileHistoryDialog\" timestamp=\"1600796046096\">\r\n      <screen x=\"0\" y=\"0\" width=\"1920\" height=\"1040\" />\r\n    </state>\r\n    <state x=\"92\" y=\"92\" width=\"1736\" height=\"856\" key=\"VCS.FileHistoryDialog/0.0.1920.1040/1920.0.1920.1040@0.0.1920.1040\" timestamp=\"1600796046096\" />\r\n    <state x=\"552\" y=\"252\" key=\"Vcs.Push.Dialog.v2\" timestamp=\"1604153449537\">\r\n      <screen x=\"0\" y=\"0\" width=\"1920\" height=\"1040\" />\r\n    </state>\r\n    <state x=\"552\" y=\"252\" key=\"Vcs.Push.Dialog.v2/0.0.1920.1040/1920.0.1920.1040@0.0.1920.1040\" timestamp=\"1604153449537\" />\r\n    <state x=\"777\" y=\"433\" key=\"com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2\" timestamp=\"1602978351653\">\r\n      <screen x=\"0\" y=\"0\" width=\"1920\" height=\"1040\" />\r\n    </state>\r\n    <state x=\"777\" y=\"433\" key=\"com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2/0.0.1920.1040/1920.0.1920.1040@0.0.1920.1040\" timestamp=\"1602978351653\" />\r\n    <state x=\"623\" y=\"225\" width=\"672\" height=\"678\" key=\"search.everywhere.popup\" timestamp=\"1600468610316\">\r\n      <screen x=\"0\" y=\"0\" width=\"1920\" height=\"1040\" />\r\n    </state>\r\n    <state x=\"623\" y=\"225\" width=\"672\" height=\"678\" key=\"search.everywhere.popup/0.0.1920.1040/1920.0.1920.1040@0.0.1920.1040\" timestamp=\"1600468610316\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/.idea.OpenTK/.idea/workspace.xml	(revision cb0a3442d5c36152c334a82b3a1b39ee4d1ba2cb)
+++ .idea/.idea.OpenTK/.idea/workspace.xml	(date 1604253705455)
@@ -24,7 +24,12 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="c3dcaea8-337b-400d-b616-a33adbf7aef1" name="Default Changelist" comment="Updated README.md">
-      <change beforePath="$PROJECT_DIR$/.idea/.idea.OpenTK/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/.idea.OpenTK/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Program/MainRenderWindow.cs" beforeDir="false" afterPath="$PROJECT_DIR$/Program/MainRenderWindow.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Program/obj/Program.csproj.nuget.g.props" beforeDir="false" afterPath="$PROJECT_DIR$/Program/obj/Program.csproj.nuget.g.props" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Program/obj/Release/netcoreapp2.1/Program.csprojAssemblyReference.cache" beforeDir="false" afterPath="$PROJECT_DIR$/Program/obj/Release/netcoreapp2.1/Program.csprojAssemblyReference.cache" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Program/obj/Release/netcoreapp3.1/Program.AssemblyInfo.cs" beforeDir="false" afterPath="$PROJECT_DIR$/Program/obj/Release/netcoreapp3.1/Program.AssemblyInfo.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Program/obj/project.packagespec.json" beforeDir="false" afterPath="$PROJECT_DIR$/Program/obj/project.packagespec.json" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Program/obj/rider.project.restore.info" beforeDir="false" afterPath="$PROJECT_DIR$/Program/obj/rider.project.restore.info" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -32,9 +37,16 @@
     <option name="LAST_RESOLUTION" value="IGNORE" />
   </component>
   <component name="Git.Settings">
+    <option name="RECENT_BRANCH_BY_REPOSITORY">
+      <map>
+        <entry key="$PROJECT_DIR$" value="master" />
+      </map>
+    </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+    <option name="SIGN_OFF_COMMIT" value="true" />
   </component>
   <component name="HighlightingSettingsPerFile">
+    <setting file="file://$APPLICATION_CONFIG_DIR$/resharper-host/SourcesCache/D1E7F878-0854-47F6-B8CB-E8C0648C86A4/12/Gdiplus.cs" root0="SKIP_HIGHLIGHTING" />
     <setting file="file://$PROJECT_DIR$/Program/MainRenderWindow.cs" root0="FORCE_HIGHLIGHTING" />
   </component>
   <component name="IdeDocumentHistory">
@@ -50,8 +62,8 @@
         <option value="$PROJECT_DIR$/Shaders/test.resx" />
         <option value="$PROJECT_DIR$/Program/Shader.cs" />
         <option value="$PROJECT_DIR$/Program/Shaders.cs" />
-        <option value="$PROJECT_DIR$/Program/MainRenderWindow.cs" />
         <option value="$PROJECT_DIR$/README.md" />
+        <option value="$PROJECT_DIR$/Program/MainRenderWindow.cs" />
       </list>
     </option>
   </component>
@@ -234,10 +246,10 @@
       <screen x="0" y="0" width="1920" height="1040" />
     </state>
     <state x="92" y="92" width="1736" height="856" key="VCS.FileHistoryDialog/0.0.1920.1040/1920.0.1920.1040@0.0.1920.1040" timestamp="1600796046096" />
-    <state x="552" y="252" key="Vcs.Push.Dialog.v2" timestamp="1604153449537">
+    <state x="552" y="252" key="Vcs.Push.Dialog.v2" timestamp="1604253704686">
       <screen x="0" y="0" width="1920" height="1040" />
     </state>
-    <state x="552" y="252" key="Vcs.Push.Dialog.v2/0.0.1920.1040/1920.0.1920.1040@0.0.1920.1040" timestamp="1604153449537" />
+    <state x="552" y="252" key="Vcs.Push.Dialog.v2/0.0.1920.1040/1920.0.1920.1040@0.0.1920.1040" timestamp="1604253704686" />
     <state x="777" y="433" key="com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2" timestamp="1602978351653">
       <screen x="0" y="0" width="1920" height="1040" />
     </state>
Index: Program/obj/Program.csproj.nuget.g.props
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\r\n<Project ToolsVersion=\"14.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <PropertyGroup Condition=\" '$(ExcludeRestorePackageImports)' != 'true' \">\r\n    <RestoreSuccess Condition=\" '$(RestoreSuccess)' == '' \">True</RestoreSuccess>\r\n    <RestoreTool Condition=\" '$(RestoreTool)' == '' \">NuGet</RestoreTool>\r\n    <ProjectAssetsFile Condition=\" '$(ProjectAssetsFile)' == '' \">$(MSBuildThisFileDirectory)project.assets.json</ProjectAssetsFile>\r\n    <NuGetPackageRoot Condition=\" '$(NuGetPackageRoot)' == '' \">$(UserProfile)\\.nuget\\packages\\</NuGetPackageRoot>\r\n    <NuGetPackageFolders Condition=\" '$(NuGetPackageFolders)' == '' \">C:\\Users\\35196\\.nuget\\packages\\;C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder</NuGetPackageFolders>\r\n    <NuGetProjectStyle Condition=\" '$(NuGetProjectStyle)' == '' \">PackageReference</NuGetProjectStyle>\r\n    <NuGetToolVersion Condition=\" '$(NuGetToolVersion)' == '' \">5.7.0</NuGetToolVersion>\r\n  </PropertyGroup>\r\n  <ItemGroup Condition=\" '$(ExcludeRestorePackageImports)' != 'true' \">\r\n    <SourceRoot Include=\"$([MSBuild]::EnsureTrailingSlash($(NuGetPackageFolders)))\" />\r\n  </ItemGroup>\r\n  <PropertyGroup>\r\n    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>\r\n  </PropertyGroup>\r\n  <ImportGroup Condition=\" '$(TargetFramework)' == 'netcoreapp2.1' AND '$(ExcludeRestorePackageImports)' != 'true' \">\r\n    <Import Project=\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\build\\netcoreapp2.1\\Microsoft.NETCore.App.props\" Condition=\"Exists('C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\build\\netcoreapp2.1\\Microsoft.NETCore.App.props')\" />\r\n  </ImportGroup>\r\n</Project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Program/obj/Program.csproj.nuget.g.props	(revision cb0a3442d5c36152c334a82b3a1b39ee4d1ba2cb)
+++ Program/obj/Program.csproj.nuget.g.props	(date 1604253674714)
@@ -7,11 +7,8 @@
     <NuGetPackageRoot Condition=" '$(NuGetPackageRoot)' == '' ">$(UserProfile)\.nuget\packages\</NuGetPackageRoot>
     <NuGetPackageFolders Condition=" '$(NuGetPackageFolders)' == '' ">C:\Users\35196\.nuget\packages\;C:\Program Files\dotnet\sdk\NuGetFallbackFolder</NuGetPackageFolders>
     <NuGetProjectStyle Condition=" '$(NuGetProjectStyle)' == '' ">PackageReference</NuGetProjectStyle>
-    <NuGetToolVersion Condition=" '$(NuGetToolVersion)' == '' ">5.7.0</NuGetToolVersion>
+    <NuGetToolVersion Condition=" '$(NuGetToolVersion)' == '' ">5.5.0</NuGetToolVersion>
   </PropertyGroup>
-  <ItemGroup Condition=" '$(ExcludeRestorePackageImports)' != 'true' ">
-    <SourceRoot Include="$([MSBuild]::EnsureTrailingSlash($(NuGetPackageFolders)))" />
-  </ItemGroup>
   <PropertyGroup>
     <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
   </PropertyGroup>
Index: Program/obj/rider.project.restore.info
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>16040783526729548
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Program/obj/rider.project.restore.info	(revision cb0a3442d5c36152c334a82b3a1b39ee4d1ba2cb)
+++ Program/obj/rider.project.restore.info	(date 1604253674773)
@@ -1,1 +1,1 @@
-16040783526729548
\ No newline at end of file
+16042536747379990
\ No newline at end of file
Index: Program/MainRenderWindow.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\r\nusing System.Collections.Generic;\r\nusing System.Drawing;\r\nusing System.IO;\r\nusing System.Text;\r\nusing System.Text.RegularExpressions;\r\nusing Newtonsoft.Json;\r\nusing OpenTK;\r\nusing OpenTK.Graphics;\r\nusing OpenTK.Graphics.OpenGL;\r\nusing OpenTK.Input;\r\nusing Boolean = System.Boolean;\r\n\r\nnamespace Program\r\n{\r\n    public class MainRenderWindow : GameWindow\r\n    {\r\n        private readonly List<TexturedObject> _mainTexturedObjects = new List<TexturedObject>();\r\n        private readonly List<Object> _mainObjects = new List<Object>();\r\n        private Lamp _mainLamp;\r\n        private Shader _lampShader, _lightingShader, _textureShader, _2dShader, _2dTextured;\r\n        private Camera _camera;\r\n        private bool _firstMove = true;\r\n        private Vector2 _lastPos;\r\n        protected Boolean RenderLight = false;\r\n        private float cameraSpeed = 20f;\r\n        private float sensitivity = 0.2f;\r\n        protected Boolean UseDepthTest = false, UseAlpha = true, KeyboardAndMouseInput = true, loadedFont = false, showSet = false, lastTime = true, useSettings = false;\r\n\r\n\r\n        protected MainRenderWindow(int width, int height, string title)\r\n            : base(width, height, GraphicsMode.Default, title)\r\n        {\r\n        }\r\n        \r\n        protected override void OnLoad(EventArgs e)\r\n        {\r\n            if(UseDepthTest) {GL.Enable(EnableCap.DepthTest);}\r\n            if(UseAlpha) {GL.BlendFunc(BlendingFactor.SrcAlpha, BlendingFactor.OneMinusSrcAlpha);}\r\n            GL.Enable(EnableCap.Blend);\r\n            _lightingShader = new Shader(Shaders.ShaderVert, Shaders.LightingFrag);\r\n            _lampShader = new Shader(Shaders.ShaderVert, Shaders.ShaderFrag);\r\n            _2dShader = new Shader(Shaders.Shader2DVert, Shaders.Shader2DFrag);\r\n            _textureShader = new Shader(Shaders.TextureVert, Shaders.TextureFrag);\r\n            _2dTextured = new Shader(Shaders.Texture2DVert, Shaders.Texture2DFrag);\r\n            _lightingShader.Use();\r\n            _lampShader.Use();\r\n            _textureShader.Use();\r\n            _2dShader.Use();\r\n            _2dTextured.Use();\r\n                                                        \r\n            _camera = new Camera(Vector3.UnitZ * 3, Width / (float)Height);\r\n            \r\n            CursorVisible = !KeyboardAndMouseInput;\r\n        }\r\n\r\n        protected void setClearColor(Color4 color)\r\n        {\r\n            GL.ClearColor(color);\r\n\r\n        }\r\n        protected override void OnRenderFrame(FrameEventArgs e)\r\n        {\r\n            if (RenderLight) { _mainLamp.show(_camera, _lampShader); }\r\n\r\n            foreach (Object obj in _mainObjects)\r\n            {\r\n                obj.show(_camera);\r\n            }\r\n            foreach (TexturedObject obj in _mainTexturedObjects)\r\n            {\r\n                obj.show(_camera);\r\n            }\r\n\r\n            if (showSet)\r\n            {\r\n                var mouse = Mouse.GetState();\r\n                if (mouse.IsButtonDown(MouseButton.Left))\r\n                {\r\n                    checkClicks(set);\r\n                }\r\n                showSettings(set);\r\n            }\r\n\r\n            SwapBuffers();\r\n\r\n            base.OnRenderFrame(e);\r\n        }\r\n        protected override void OnUpdateFrame(FrameEventArgs e)\r\n        {\r\n\r\n            if (!Focused) // check to see if the window is focused\r\n            {\r\n                return;\r\n            }\r\n            var input = Keyboard.GetState();\r\n            var mouse = Mouse.GetState();\r\n\r\n            if (input.IsKeyDown(Key.Escape) && lastTime)\r\n            {\r\n                if (!useSettings)\r\n                {\r\n                    //Exit();\r\n                }\r\n                else\r\n                {\r\n                    showSet = !showSet;\r\n                    lastTime = false;\r\n                }\r\n                \r\n            }\r\n            if (input.IsKeyUp(Key.Escape))\r\n            {\r\n                lastTime = true;\r\n            }\r\n\r\n            \r\n\r\n\r\n            if (KeyboardAndMouseInput)\r\n            {\r\n                \r\n                if (input.IsKeyDown(Key.W))\r\n                {\r\n                    _camera.Position += _camera.Front * cameraSpeed * (float) e.Time; // Forward\r\n                }\r\n\r\n                if (input.IsKeyDown(Key.S))\r\n                {\r\n                    _camera.Position -= _camera.Front * cameraSpeed * (float) e.Time; // Backwards\r\n                }\r\n\r\n                if (input.IsKeyDown(Key.A))\r\n                {\r\n                    _camera.Position -= _camera.Right * cameraSpeed * (float) e.Time; // Left\r\n                }\r\n\r\n                if (input.IsKeyDown(Key.D))\r\n                {\r\n                    _camera.Position += _camera.Right * cameraSpeed * (float) e.Time; // Right\r\n                }\r\n\r\n                if (input.IsKeyDown(Key.Space))\r\n                {\r\n                    _camera.Position += _camera.Up * cameraSpeed * (float) e.Time; // Up\r\n                }\r\n\r\n                if (input.IsKeyDown(Key.LShift))\r\n                {\r\n                    _camera.Position -= _camera.Up * cameraSpeed * (float) e.Time; // Down\r\n                }\r\n\r\n                // Get the mouse state\r\n\r\n                if (_firstMove) // this bool variable is initially set to true\r\n                {\r\n                    _lastPos = new Vector2(mouse.X, mouse.Y);\r\n                    _firstMove = false;\r\n                }\r\n                else\r\n                {\r\n                    // Calculate the offset of the mouse position\r\n                    var deltaX = mouse.X - _lastPos.X;\r\n                    var deltaY = mouse.Y - _lastPos.Y;\r\n                    _lastPos = new Vector2(mouse.X, mouse.Y);\r\n\r\n                    // Apply the camera pitch and yaw (we clamp the pitch in the camera class)\r\n                    _camera.Yaw += deltaX * sensitivity;\r\n                    _camera.Pitch -= deltaY * sensitivity; // reversed since y-coordinates range from bottom to top\r\n                }\r\n\r\n                \r\n\r\n                Mouse.SetPosition(1920 / 2, 1080 / 2);\r\n            }\r\n            base.OnUpdateFrame(e);\r\n        }\r\n        protected override void OnResize(EventArgs e)\r\n        {\r\n            GL.Viewport(0, 0, Width, Height);\r\n            base.OnResize(e);\r\n        }\r\n        protected override void OnUnload(EventArgs e)\r\n        {\r\n            GL.BindBuffer(BufferTarget.ArrayBuffer, 0);\r\n            GL.BindVertexArray(0);\r\n            GL.UseProgram(0);\r\n\r\n\r\n            GL.DeleteProgram(_lampShader.Handle);\r\n            GL.DeleteProgram(_lightingShader.Handle);\r\n            GL.DeleteProgram(_2dShader.Handle);\r\n            GL.DeleteProgram(_textureShader.Handle);\r\n\r\n            foreach(Object obj in _mainObjects)\r\n            {\r\n                obj.Dispose();\r\n            }\r\n            foreach(TexturedObject obj in _mainTexturedObjects)\r\n            {\r\n                obj.Dispose();\r\n            }\r\n\r\n            _mainLamp?.Dispose();\r\n\r\n            base.OnUnload(e);\r\n        }\r\n        private static float[] loadObj(string path)\r\n        {\r\n            string[] lines = System.IO.File.ReadAllLines(path);\r\n            List<float[]> vertices = new List<float[]>();\r\n            List<float> final = new List<float>();\r\n            foreach (string line in lines)\r\n            {\r\n                string[] lineSlitted = line.Split(\" \");\r\n                if (lineSlitted[0] == \"v\")\r\n                {\r\n                    float[] toAdd = new float[3];\r\n                    toAdd[0] = (float.Parse(lineSlitted[1]));\r\n                    toAdd[1] = (float.Parse(lineSlitted[2]));\r\n                    toAdd[2] = (float.Parse(lineSlitted[3]));\r\n                    vertices.Add(toAdd);\r\n                }\r\n                if (lineSlitted[0] == \"f\")\r\n                {\r\n                    string[] t1 = lineSlitted[1].Split(\"//\");\r\n                    string[] t2 = lineSlitted[2].Split(\"//\");\r\n                    string[] t3 = lineSlitted[3].Split(\"//\");\r\n\r\n\r\n\r\n                    float[] v1 = vertices[int.Parse(t1[0]) - 1];\r\n                    float[] v2 = vertices[int.Parse(t2[0]) - 1];\r\n                    float[] v3 = vertices[int.Parse(t3[0]) - 1];\r\n\r\n                    Vector3 v01 = new Vector3(v1[0], v1[1], v1[2]);\r\n                    Vector3 v02 = new Vector3(v2[0], v2[1], v2[2]);\r\n                    Vector3 v03 = new Vector3(v3[0], v3[1], v3[2]);\r\n\r\n                    Vector3 l1 = v02 - v01;\r\n                    Vector3 l2 = v03 - v01;\r\n\r\n                    Vector3 n = Vector3.Cross(l2, l1);\r\n\r\n                    final.Add(v1[0]); final.Add(v1[1]); final.Add(v1[2]); final.Add(n.X); final.Add(n.Y); final.Add(n.Z);\r\n                    final.Add(v2[0]); final.Add(v2[1]); final.Add(v2[2]); final.Add(n.X); final.Add(n.Y); final.Add(n.Z);\r\n                    final.Add(v3[0]); final.Add(v3[1]); final.Add(v3[2]); final.Add(n.X); final.Add(n.Y); final.Add(n.Z);\r\n                }\r\n\r\n            }\r\n\r\n\r\n            return final.ToArray();\r\n        }\r\n        private static float[] loadObjTextured(string path)\r\n        {\r\n            string[] lines = System.IO.File.ReadAllLines(path);\r\n            List<float[]> vertices = new List<float[]>();\r\n            List<float[]> textureCords = new List<float[]>();\r\n            List<float> final = new List<float>();\r\n            foreach (string line in lines)\r\n            {\r\n                string[] lineSlitted = line.Split(\" \");\r\n                if (lineSlitted[0] == \"v\")\r\n                {\r\n                    float[] toAdd = new float[3];\r\n                    toAdd[0] = (float.Parse(lineSlitted[1]));\r\n                    toAdd[1] = (float.Parse(lineSlitted[2]));\r\n                    toAdd[2] = (float.Parse(lineSlitted[3]));\r\n                    vertices.Add(toAdd);\r\n                }\r\n                if (lineSlitted[0] == \"vt\")\r\n                {\r\n                    float[] toAdd = new float[2];\r\n                    toAdd[0] = (float.Parse(lineSlitted[1]));\r\n                    toAdd[1] = (-(float.Parse(lineSlitted[2]) - 1));\r\n                    textureCords.Add(toAdd);\r\n                }\r\n                if (lineSlitted[0] == \"f\")\r\n                {\r\n                    string[] t1 = lineSlitted[1].Split(\"/\");\r\n                    string[] t2 = lineSlitted[2].Split(\"/\");\r\n                    string[] t3 = lineSlitted[3].Split(\"/\");\r\n\r\n\r\n\r\n                    float[] v1 = vertices[int.Parse(t1[0]) - 1];\r\n                    if (int.Parse(t2[0]) - 1 >= 0 && vertices.Count > int.Parse(t2[0]) - 1)\r\n                    {\r\n                        float[] v2 = vertices[int.Parse(t2[0]) - 1];\r\n                        float[] v3 = vertices[int.Parse(t3[0]) - 1];\r\n                        float[] tex1 = textureCords[int.Parse(t1[1]) - 1];\r\n                        float[] tex2 = textureCords[int.Parse(t2[1]) - 1];\r\n                        float[] tex3 = textureCords[int.Parse(t3[1]) - 1];\r\n\r\n                        Vector3 v01 = new Vector3(v1[0], v1[1], v1[2]);\r\n                        Vector3 v02 = new Vector3(v2[0], v2[1], v2[2]);\r\n                        Vector3 v03 = new Vector3(v3[0], v3[1], v3[2]);\r\n\r\n                        Vector3 l1 = v02 - v01;\r\n                        Vector3 l2 = v03 - v01;\r\n\r\n                        Vector3 n = Vector3.Cross(l2, l1);\r\n\r\n                        final.Add(v1[0]); final.Add(v1[1]); final.Add(v1[2]); final.Add(n.X); final.Add(n.Y); final.Add(n.Z); final.Add(tex1[0]); final.Add(tex1[1]);\r\n                        final.Add(v2[0]); final.Add(v2[1]); final.Add(v2[2]); final.Add(n.X); final.Add(n.Y); final.Add(n.Z); final.Add(tex2[0]); final.Add(tex2[1]);\r\n                        final.Add(v3[0]); final.Add(v3[1]); final.Add(v3[2]); final.Add(n.X); final.Add(n.Y); final.Add(n.Z); final.Add(tex3[0]); final.Add(tex3[1]);\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n\r\n            return final.ToArray();\r\n        }\r\n        private class Object\r\n        {\r\n            private readonly int _vertexBufferObject;\r\n            private readonly int _mainObject;\r\n            private readonly float[] _vertices;\r\n            private float _rotX, _rotY, _rotZ;\r\n            private Vector3 _pos;\r\n            private readonly Vector3 _color;\r\n            private readonly Shader _shader;\r\n            private readonly Lamp _lamp;\r\n            private float _scale = 1.0f;\r\n            public Object(string path, Shader lightingShader, Lamp lamp, Vector3 col)\r\n            {\r\n                _vertices = loadObj(path);\r\n\r\n                _vertexBufferObject = GL.GenBuffer();\r\n                GL.BindBuffer(BufferTarget.ArrayBuffer, _vertexBufferObject);\r\n                GL.BufferData(BufferTarget.ArrayBuffer, _vertices.Length * sizeof(float), _vertices, BufferUsageHint.StaticDraw);\r\n\r\n                _mainObject = GL.GenVertexArray();\r\n                GL.BindVertexArray(_mainObject);\r\n\r\n                GL.BindBuffer(BufferTarget.ArrayBuffer, _vertexBufferObject);\r\n\r\n                var positionLocation = lightingShader.GetAttribLocation(\"aPos\");\r\n                GL.EnableVertexAttribArray(positionLocation);\r\n                GL.VertexAttribPointer(positionLocation, 3, VertexAttribPointerType.Float, false, 6 * sizeof(float), 0);\r\n\r\n                var normalLocation = lightingShader.GetAttribLocation(\"aNormal\");\r\n                GL.EnableVertexAttribArray(normalLocation);\r\n                GL.VertexAttribPointer(normalLocation, 3, VertexAttribPointerType.Float, false, 6 * sizeof(float), 3 * sizeof(float));\r\n                _rotX = 0.0f; _rotY = 0.0f; _rotZ = 0.0f;\r\n                _pos = new Vector3(0.0f, 0.0f, 0.0f);\r\n                _shader = lightingShader;\r\n                _lamp = lamp;\r\n                _color = col;\r\n            }\r\n            public Object(float[] vertices, Shader lightingShader, Lamp lamp, Vector3 col)\r\n            {\r\n                _vertices = vertices;\r\n\r\n                _vertexBufferObject = GL.GenBuffer();\r\n                GL.BindBuffer(BufferTarget.ArrayBuffer, _vertexBufferObject);\r\n                GL.BufferData(BufferTarget.ArrayBuffer, this._vertices.Length * sizeof(float), this._vertices, BufferUsageHint.StaticDraw);\r\n\r\n                _mainObject = GL.GenVertexArray();\r\n                GL.BindVertexArray(_mainObject);\r\n\r\n                GL.BindBuffer(BufferTarget.ArrayBuffer, _vertexBufferObject);\r\n\r\n                var positionLocation = lightingShader.GetAttribLocation(\"aPos\");\r\n                GL.EnableVertexAttribArray(positionLocation);\r\n                GL.VertexAttribPointer(positionLocation, 3, VertexAttribPointerType.Float, false, 6 * sizeof(float), 0);\r\n\r\n                var normalLocation = lightingShader.GetAttribLocation(\"aNormal\");\r\n                GL.EnableVertexAttribArray(normalLocation);\r\n                GL.VertexAttribPointer(normalLocation, 3, VertexAttribPointerType.Float, false, 6 * sizeof(float), 3 * sizeof(float));\r\n                _rotX = 0.0f; _rotY = 0.0f; _rotZ = 0.0f;\r\n                _pos = new Vector3(0.0f, 0.0f, 0.0f);\r\n                _shader = lightingShader;\r\n                _lamp = lamp;\r\n                _color = col;\r\n            }\r\n            public void show(Camera camera)\r\n            {\r\n                GL.BindVertexArray(_mainObject);\r\n\r\n                _shader.Use();\r\n\r\n\r\n                _shader.SetMatrix4(\"model\",  (Matrix4.CreateScale(_scale) *  Matrix4.CreateRotationX(_rotX) * Matrix4.CreateRotationX(_rotY) * Matrix4.CreateRotationZ(_rotZ)) * Matrix4.CreateTranslation(_pos));\r\n                _shader.SetMatrix4(\"view\", camera.GetViewMatrix());\r\n                _shader.SetMatrix4(\"projection\", camera.GetProjectionMatrix());\r\n\r\n                _shader.SetVector3(\"objectColor\", _color);\r\n                _shader.SetVector3(\"lightColor\", _lamp.LightColor);\r\n                _shader.SetVector3(\"lightPos\", _lamp.Pos);\r\n\r\n                GL.DrawArrays(PrimitiveType.Triangles, 0, _vertices.Length / 6);\r\n            }\r\n            public void setRotationX(float angle)\r\n            {\r\n                _rotX = angle;\r\n            }\r\n            public void setRotationY(float angle)\r\n            {\r\n                _rotY = angle;\r\n            }\r\n            public void setRotationZ(float angle)\r\n            {\r\n                _rotZ = angle;\r\n            }\r\n            public void setPositionInSpace(float x, float y, float z)\r\n            {\r\n                _pos = new Vector3(x, y, z);\r\n            }\r\n            public void setScale(float scale)\r\n            {\r\n                _scale = scale; \r\n            }\r\n            public void Dispose()\r\n            {\r\n                GL.DeleteBuffer(_vertexBufferObject);\r\n                GL.DeleteVertexArray(_mainObject);\r\n            }\r\n        }\r\n        private class Lamp\r\n        {\r\n            private readonly int _vertexBufferObject;\r\n            private readonly int _mainObject;\r\n            public readonly Vector3 Pos;\r\n            public readonly Vector3 LightColor;\r\n            private readonly float[] _vertices;\r\n            public Lamp(Vector3 pos, Vector3 lightColor, Shader lampShader)\r\n            {\r\n                Pos = pos;\r\n                LightColor = lightColor;\r\n                _vertices = loadObj(\"Objs/sphere.obj\");\r\n\r\n                _vertexBufferObject = GL.GenBuffer();\r\n                GL.BindBuffer(BufferTarget.ArrayBuffer, _vertexBufferObject);\r\n                GL.BufferData(BufferTarget.ArrayBuffer, _vertices.Length * sizeof(float), _vertices, BufferUsageHint.StaticDraw);\r\n\r\n                _mainObject = GL.GenVertexArray();\r\n                GL.BindVertexArray(_mainObject);\r\n\r\n                GL.BindBuffer(BufferTarget.ArrayBuffer, _vertexBufferObject);\r\n\r\n                var positionLocation = lampShader.GetAttribLocation(\"aPos\");\r\n                GL.EnableVertexAttribArray(positionLocation);\r\n                GL.VertexAttribPointer(positionLocation, 3, VertexAttribPointerType.Float, false, 6 * sizeof(float), 0);\r\n\r\n                lampShader.SetVector3(\"lightColor\", lightColor);\r\n            }\r\n            public void show(Camera camera, Shader lampShader)\r\n            {\r\n                GL.BindVertexArray(_mainObject);\r\n\r\n                lampShader.Use();\r\n\r\n                Matrix4 lampMatrix = Matrix4.Identity;\r\n                lampMatrix *= Matrix4.CreateScale(0.2f);\r\n                lampMatrix *= Matrix4.CreateTranslation(Pos);\r\n\r\n                lampShader.SetMatrix4(\"model\", lampMatrix);\r\n                lampShader.SetMatrix4(\"view\", camera.GetViewMatrix());\r\n                lampShader.SetMatrix4(\"projection\", camera.GetProjectionMatrix());\r\n\r\n                GL.DrawArrays(PrimitiveType.Triangles, 0, _vertices.Length / 6);\r\n            }\r\n            public void Dispose()\r\n            {\r\n                GL.DeleteBuffer(_vertexBufferObject);\r\n                GL.DeleteVertexArray(_mainObject);\r\n            }\r\n        }\r\n        private class TexturedObject\r\n        {\r\n            private readonly int _vertexBufferObject;\r\n            private readonly int _mainObject;\r\n            private readonly float[] _vertices;\r\n            private float _rotX, _rotY, _rotZ;\r\n            private readonly Texture _texture;\r\n            private Vector3 _pos;\r\n            private readonly Shader _shader;\r\n            public TexturedObject(string path, Shader textureShader, string texturePath)\r\n            {\r\n                _vertices = loadObjTextured(path);\r\n\r\n                _vertexBufferObject = GL.GenBuffer();\r\n                GL.BindBuffer(BufferTarget.ArrayBuffer, _vertexBufferObject);\r\n                GL.BufferData(BufferTarget.ArrayBuffer, _vertices.Length * sizeof(float), _vertices, BufferUsageHint.StaticDraw);\r\n\r\n                _mainObject = GL.GenVertexArray();\r\n                GL.BindVertexArray(_mainObject);\r\n                \r\n                var positionLocation = textureShader.GetAttribLocation(\"aPos\");\r\n                GL.EnableVertexAttribArray(positionLocation);\r\n                GL.VertexAttribPointer(positionLocation, 3, VertexAttribPointerType.Float, false, 8 * sizeof(float), 0);\r\n\r\n                var normalLocation = textureShader.GetAttribLocation(\"aNormal\");\r\n                GL.EnableVertexAttribArray(normalLocation);\r\n                GL.VertexAttribPointer(normalLocation, 3, VertexAttribPointerType.Float, false, 8 * sizeof(float), 3 * sizeof(float));\r\n\r\n                var textureLocation = textureShader.GetAttribLocation(\"aTexture\");\r\n                GL.EnableVertexAttribArray(textureLocation);\r\n                GL.VertexAttribPointer(textureLocation, 2, VertexAttribPointerType.Float, false, 8 * sizeof(float), 6 * sizeof(float));\r\n\r\n                _texture = new Texture(texturePath, TextureMinFilter.Nearest, TextureMagFilter.Nearest);\r\n                _texture.Use();\r\n\r\n                _rotX = 0.0f; _rotY = 0.0f; _rotZ = 0.0f;\r\n                _pos = new Vector3(0.0f, 0.0f, 0.0f);\r\n                _shader = textureShader;\r\n            }\r\n\r\n            public void show(Camera camera)\r\n            {\r\n                GL.BindVertexArray(_mainObject);\r\n\r\n                _texture.Use();\r\n                _shader.Use();\r\n\r\n\r\n                _shader.SetMatrix4(\"model\", (Matrix4.CreateRotationX(_rotX) * Matrix4.CreateRotationX(_rotY) * Matrix4.CreateRotationZ(_rotZ)) * Matrix4.CreateTranslation(_pos));\r\n                _shader.SetMatrix4(\"view\", camera.GetViewMatrix());\r\n                _shader.SetMatrix4(\"projection\", camera.GetProjectionMatrix());\r\n\r\n                //textureShader.SetVector3(\"lightColor\", lamp.lightColor);\r\n                //textureShader.SetVector3(\"lightPos\", lamp.pos);\r\n                GL.DrawArrays(PrimitiveType.Triangles, 0, _vertices.Length / 8);\r\n            }\r\n            public void setRotationX(float angle)\r\n            {\r\n                _rotX = angle;\r\n            }\r\n            public void setRotationY(float angle)\r\n            {\r\n                _rotY = angle;\r\n            }\r\n            public void setRotationZ(float angle)\r\n            {\r\n                _rotZ = angle;\r\n            }\r\n            public void setPositionInSpace(float x, float y, float z)\r\n            {\r\n                _pos = new Vector3(x, y, z);\r\n            }\r\n            public void Dispose()\r\n            {\r\n                GL.DeleteBuffer(_vertexBufferObject);\r\n                GL.DeleteVertexArray(_mainObject);\r\n                GL.DeleteTexture(_texture.Handle);\r\n            }\r\n\r\n        }\r\n        public int createCube(Vector3 color)\r\n        {\r\n            _mainObjects.Add(new Object(\"Objs/cube.obj\", _lightingShader, _mainLamp, color));\r\n            return _mainObjects.Count - 1;\r\n        }\r\n        public int createSphere(Vector3 color)\r\n        {\r\n            _mainObjects.Add(new Object(\"Objs/sphere.obj\", _lightingShader, _mainLamp, color));\r\n            return _mainObjects.Count - 1;\r\n        }\r\n        public int createTorus(Vector3 color)\r\n        {\r\n            _mainObjects.Add(new Object(\"Objs/torus.obj\", _lightingShader, _mainLamp, color));\r\n            return _mainObjects.Count - 1;\r\n        }\r\n        public int createCylinder(Vector3 color)\r\n        {\r\n            _mainObjects.Add(new Object(\"Objs/cilinder.obj\", _lightingShader, _mainLamp, color));\r\n            return _mainObjects.Count - 1;\r\n        }\r\n        public int createPlane(float x1, float y1, float z1,\r\n                               float x2, float y2, float z2,\r\n                               float x3, float y3, float z3,\r\n                               float x4, float y4, float z4, Vector3 color)\r\n        {\r\n            Vector3 l1 = new Vector3(x2 - x1, y2 - y1, z2 - z1);\r\n            Vector3 l2 = new Vector3(x3 - x1, y3 - y1, z3 - z1);\r\n            Vector3 normal = Vector3.Cross(l1, l2);\r\n\r\n            float[] vertices =\r\n            {\r\n                x1, y1, z1, normal.X,  normal.Y, normal.Z,\r\n                x2, y2, z2, normal.X,  normal.Y, normal.Z,\r\n                x3, y3, z3, normal.X,  normal.Y, normal.Z,\r\n\r\n                x4, y4, z4, normal.X,  normal.Y, normal.Z,\r\n                x2, y2, z2, normal.X,  normal.Y, normal.Z,\r\n                x3, y3, z3, normal.X,  normal.Y, normal.Z,\r\n            };\r\n            _mainObjects.Add(new Object(vertices, _lightingShader, _mainLamp, color));\r\n            return _mainObjects.Count - 1;\r\n        }\r\n        public void openTexturedObj(string obj, string texture)\r\n        {\r\n            _mainTexturedObjects.Add(new TexturedObject(obj, _textureShader, texture));\r\n        }\r\n        public void openObj(string obj, Vector3 color)\r\n        {\r\n            _mainObjects.Add(new Object(obj, _lightingShader, _mainLamp, color));\r\n        }\r\n        public void createMainLight(Vector3 pos, Vector3 color)\r\n        {\r\n            _mainLamp = new Lamp(pos, color, _lampShader);\r\n        }\r\n        public void rotateObject(float x, float y, float z, int handle)\r\n        {\r\n            _mainObjects[handle].setRotationX(x);\r\n            _mainObjects[handle].setRotationY(y);\r\n            _mainObjects[handle].setRotationZ(z);\r\n        }\r\n        public void rotateTexturedObject(float x, float y, float z, int handle)\r\n        {\r\n            _mainTexturedObjects[handle].setRotationX(x);\r\n            _mainTexturedObjects[handle].setRotationY(y);\r\n            _mainTexturedObjects[handle].setRotationZ(z);\r\n        }\r\n        public void scaleObject(float scale, int handle)\r\n        {\r\n            _mainObjects[handle].setScale(scale);\r\n        }\r\n        public void translateObject(float x, float y, float z, int handle)\r\n        {\r\n            _mainObjects[handle].setPositionInSpace(x, y, z);\r\n        }\r\n        public void translateTexturedObject(float x, float y, float z, int handle)\r\n        {\r\n            _mainTexturedObjects[handle].setPositionInSpace(x, y, z);\r\n        }\r\n        \r\n        \r\n        protected void drawTexturedRectangle(float x1, float y1, float u1, float v1, float x2, float y2, float u2, float v2, string texturePath, Color4 color, TextureMinFilter min, TextureMagFilter mag)\r\n        {\r\n            Texture texture = new Texture(texturePath, min, mag);\r\n            float x1Trans = x1 - (Width / 2);\r\n            float y1Trans = y1 - (Height / 2);\r\n            float x1Norm = x1Trans / (Width / 2);\r\n            float y1Norm = y1Trans / (Height / 2);\r\n            float x2Trans = x2 - (Width / 2);\r\n            float y2Trans = y2 - (Height / 2);\r\n            float x2Norm = x2Trans / (Width / 2);\r\n            float y2Norm = y2Trans / (Height / 2);\r\n            \r\n            float[] vertices =\r\n            {\r\n                x1Norm, y1Norm, 0f, u1, v2,\r\n                x1Norm, y2Norm, 0f, u1, v1,\r\n                x2Norm, y2Norm, 0f, u2, v1,\r\n                \r\n                x1Norm, y1Norm, 0f, u1, v2,\r\n                x2Norm, y1Norm, 0f, u2, v2,\r\n                x2Norm, y2Norm, 0f, u2, v1\r\n            };\r\n            \r\n            var vertexBufferObject = GL.GenBuffer();\r\n            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);\r\n            GL.BufferData(BufferTarget.ArrayBuffer, vertices.Length * sizeof(float), vertices, BufferUsageHint.DynamicDraw);\r\n            \r\n            texture.Use();\r\n            _2dTextured.Use();\r\n            \r\n            var mainObject = GL.GenVertexArray();\r\n            GL.BindVertexArray(mainObject);\r\n            \r\n            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);\r\n\r\n            var positionLocation = _2dTextured.GetAttribLocation(\"aPosition\");\r\n            GL.EnableVertexAttribArray(positionLocation);\r\n            GL.VertexAttribPointer(positionLocation, 3, VertexAttribPointerType.Float, false, 5 * sizeof(float), 0);\r\n\r\n            var texCoordLocation = _2dTextured.GetAttribLocation(\"aTexCoord\");\r\n            GL.EnableVertexAttribArray(texCoordLocation);\r\n            GL.VertexAttribPointer(texCoordLocation, 2, VertexAttribPointerType.Float, false, 5 * sizeof(float), 3 * sizeof(float));\r\n            \r\n            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);\r\n            \r\n            GL.BindVertexArray(mainObject);\r\n            \r\n            texture.Use();\r\n            _2dTextured.Use();\r\n            \r\n            _2dTextured.SetVector4(\"lightColor\", new Vector4(color.R, color.G, color.B, color.A));\r\n\r\n            GL.DrawArrays(PrimitiveType.Triangles, 0, 6);\r\n            \r\n            GL.DeleteBuffer(vertexBufferObject);\r\n            GL.DeleteTexture(texture.Handle);\r\n            GL.DeleteVertexArray(mainObject);\r\n\r\n        }\r\n        protected void drawTexturedRectangle(float x1, float y1, float u1, float v1, float x2, float y2, float u2, float v2, Bitmap textureBitmap, Color4 color, TextureMinFilter min, TextureMagFilter mag)\r\n        {\r\n            Texture texture = new Texture(textureBitmap, min, mag);\r\n            float x1Trans = x1 - (Width / 2);\r\n            float y1Trans = y1 - (Height / 2);\r\n            float x1Norm = x1Trans / (Width / 2);\r\n            float y1Norm = y1Trans / (Height / 2);\r\n            float x2Trans = x2 - (Width / 2);\r\n            float y2Trans = y2 - (Height / 2);\r\n            float x2Norm = x2Trans / (Width / 2);\r\n            float y2Norm = y2Trans / (Height / 2);\r\n\r\n            float[] vertices =\r\n            {\r\n                x1Norm, y1Norm, 0f, u1, v2,\r\n                x1Norm, y2Norm, 0f, u1, v1,\r\n                x2Norm, y2Norm, 0f, u2, v1,\r\n\r\n                x1Norm, y1Norm, 0f, u1, v2,\r\n                x2Norm, y1Norm, 0f, u2, v2,\r\n                x2Norm, y2Norm, 0f, u2, v1\r\n            };\r\n\r\n            var vertexBufferObject = GL.GenBuffer();\r\n            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);\r\n            GL.BufferData(BufferTarget.ArrayBuffer, vertices.Length * sizeof(float), vertices, BufferUsageHint.DynamicDraw);\r\n\r\n            texture.Use();\r\n            _2dTextured.Use();\r\n\r\n            var mainObject = GL.GenVertexArray();\r\n            GL.BindVertexArray(mainObject);\r\n\r\n            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);\r\n\r\n            var positionLocation = _2dTextured.GetAttribLocation(\"aPosition\");\r\n            GL.EnableVertexAttribArray(positionLocation);\r\n            GL.VertexAttribPointer(positionLocation, 3, VertexAttribPointerType.Float, false, 5 * sizeof(float), 0);\r\n\r\n            var texCoordLocation = _2dTextured.GetAttribLocation(\"aTexCoord\");\r\n            GL.EnableVertexAttribArray(texCoordLocation);\r\n            GL.VertexAttribPointer(texCoordLocation, 2, VertexAttribPointerType.Float, false, 5 * sizeof(float), 3 * sizeof(float));\r\n\r\n            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);\r\n\r\n            GL.BindVertexArray(mainObject);\r\n\r\n            texture.Use();\r\n            _2dTextured.Use();\r\n\r\n            _2dTextured.SetVector4(\"lightColor\", new Vector4(color.R, color.G, color.B, color.A));\r\n\r\n            GL.DrawArrays(PrimitiveType.Triangles, 0, 6);\r\n\r\n            GL.DeleteBuffer(vertexBufferObject);\r\n            GL.DeleteTexture(texture.Handle);\r\n            GL.DeleteVertexArray(mainObject);\r\n\r\n        }\r\n        protected void drawTexturedRectangle(float x1, float y1, float u1, float v1, float x2, float y2, float u2, float v2, Texture texture, Color4 color)\r\n        {\r\n            float x1Trans = x1 - (Width / 2);\r\n            float y1Trans = y1 - (Height / 2);\r\n            float x1Norm = x1Trans / (Width / 2);\r\n            float y1Norm = y1Trans / (Height / 2);\r\n            float x2Trans = x2 - (Width / 2);\r\n            float y2Trans = y2 - (Height / 2);\r\n            float x2Norm = x2Trans / (Width / 2);\r\n            float y2Norm = y2Trans / (Height / 2);\r\n\r\n            float[] vertices =\r\n            {\r\n                x1Norm, y1Norm, 0f, u1, v2,\r\n                x1Norm, y2Norm, 0f, u1, v1,\r\n                x2Norm, y2Norm, 0f, u2, v1,\r\n\r\n                x1Norm, y1Norm, 0f, u1, v2,\r\n                x2Norm, y1Norm, 0f, u2, v2,\r\n                x2Norm, y2Norm, 0f, u2, v1\r\n            };\r\n\r\n            var vertexBufferObject = GL.GenBuffer();\r\n            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);\r\n            GL.BufferData(BufferTarget.ArrayBuffer, vertices.Length * sizeof(float), vertices, BufferUsageHint.DynamicDraw);\r\n\r\n            texture.Use();\r\n            _2dTextured.Use();\r\n\r\n            var mainObject = GL.GenVertexArray();\r\n            GL.BindVertexArray(mainObject);\r\n\r\n            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);\r\n\r\n            var positionLocation = _2dTextured.GetAttribLocation(\"aPosition\");\r\n            GL.EnableVertexAttribArray(positionLocation);\r\n            GL.VertexAttribPointer(positionLocation, 3, VertexAttribPointerType.Float, false, 5 * sizeof(float), 0);\r\n\r\n            var texCoordLocation = _2dTextured.GetAttribLocation(\"aTexCoord\");\r\n            GL.EnableVertexAttribArray(texCoordLocation);\r\n            GL.VertexAttribPointer(texCoordLocation, 2, VertexAttribPointerType.Float, false, 5 * sizeof(float), 3 * sizeof(float));\r\n\r\n            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);\r\n\r\n            GL.BindVertexArray(mainObject);\r\n\r\n            texture.Use();\r\n            _2dTextured.Use();\r\n\r\n            _2dTextured.SetVector4(\"lightColor\", new Vector4(color.R, color.G, color.B, color.A));\r\n\r\n            GL.DrawArrays(PrimitiveType.Triangles, 0, 6);\r\n\r\n            GL.DeleteBuffer(vertexBufferObject);\r\n            GL.DeleteVertexArray(mainObject);\r\n\r\n        }\r\n\r\n        protected void drawLine(float x1, float y1, float x2, float y2, Color4 color)\r\n        {\r\n            float x1Trans = x1 - (Width / 2);\r\n            float y1Trans = y1 - (Height / 2);\r\n            float x1Norm = x1Trans / (Width / 2);\r\n            float y1Norm = y1Trans / (Height / 2);\r\n            float x2Trans = x2 - (Width / 2);\r\n            float y2Trans = y2 - (Height / 2);\r\n            float x2Norm = x2Trans / (Width / 2);\r\n            float y2Norm = y2Trans / (Height / 2);\r\n            float[] vertices =\r\n            {\r\n                x1Norm, y1Norm, 0f,\r\n                \r\n                x2Norm, y2Norm, 0f\r\n            };\r\n\r\n            var vertexBufferObject = GL.GenBuffer();\r\n            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);\r\n            GL.BufferData(BufferTarget.ArrayBuffer, vertices.Length * sizeof(float), vertices, BufferUsageHint.DynamicDraw);\r\n\r\n            _2dShader.Use();\r\n            \r\n            var mainObject = GL.GenVertexArray();\r\n            GL.BindVertexArray(mainObject);\r\n\r\n            var positionLocation = _2dShader.GetAttribLocation(\"aPos\");\r\n            GL.EnableVertexAttribArray(positionLocation);\r\n            GL.VertexAttribPointer(positionLocation, 3, VertexAttribPointerType.Float, false, 3 * sizeof(float), 0);\r\n\r\n            \r\n            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);\r\n\r\n            GL.BindVertexArray(mainObject);\r\n            \r\n            _2dShader.SetVector4(\"lightColor\", new Vector4(color.R, color.G, color.B, color.A));\r\n            \r\n            _2dShader.Use();\r\n            GL.DrawArrays(PrimitiveType.Lines, 0, 2);\r\n            \r\n            GL.DeleteBuffer(vertexBufferObject);\r\n            GL.DeleteVertexArray(mainObject);\r\n        }\r\n        protected void drawRectangle(float x1, float y1, float x2, float y2, Color4 color)\r\n        {\r\n            float x1Trans = x1 - (Width / 2);\r\n            float y1Trans = y1 - (Height / 2);\r\n            float x1Norm = x1Trans / (Width / 2);\r\n            float y1Norm = y1Trans / (Height / 2);\r\n            float x2Trans = x2 - (Width / 2);\r\n            float y2Trans = y2 - (Height / 2);\r\n            float x2Norm = x2Trans / (Width / 2);\r\n            float y2Norm = y2Trans / (Height / 2);\r\n            float[] vertices =\r\n            {\r\n                x1Norm, y1Norm, 0f,\r\n                x2Norm, y1Norm, 0f,\r\n                x1Norm, y2Norm, 0f,\r\n                \r\n                x2Norm, y1Norm, 0f,\r\n                x2Norm, y2Norm, 0f,\r\n                x1Norm, y2Norm, 0f\r\n            };\r\n\r\n            var vertexBufferObject = GL.GenBuffer();\r\n            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);\r\n            GL.BufferData(BufferTarget.ArrayBuffer, vertices.Length * sizeof(float), vertices, BufferUsageHint.DynamicDraw);\r\n\r\n            _2dShader.Use();\r\n            \r\n            var mainObject = GL.GenVertexArray();\r\n            GL.BindVertexArray(mainObject);\r\n\r\n            var positionLocation = _2dShader.GetAttribLocation(\"aPos\");\r\n            GL.EnableVertexAttribArray(positionLocation);\r\n            GL.VertexAttribPointer(positionLocation, 3, VertexAttribPointerType.Float, false, 3 * sizeof(float), 0);\r\n\r\n            \r\n            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);\r\n\r\n            GL.BindVertexArray(mainObject);\r\n            \r\n            _2dShader.SetVector4(\"lightColor\", new Vector4(color.R, color.G, color.B, color.A));\r\n            \r\n            _2dShader.Use();\r\n            GL.DrawArrays(PrimitiveType.Triangles, 0, 6);\r\n            \r\n            GL.DeleteBuffer(vertexBufferObject);\r\n            GL.DeleteVertexArray(mainObject);\r\n\r\n        }\r\n        protected void drawTexturedLine(float x1, float y1, float u1, float v1, float x2, float y2, float u2, float v2, Texture texture, Color4 color)\r\n        {\r\n            float x1Trans = x1 - (Width / 2);\r\n            float y1Trans = y1 - (Height / 2);\r\n            float x1Norm = x1Trans / (Width / 2);\r\n            float y1Norm = y1Trans / (Height / 2);\r\n            float x2Trans = x2 - (Width / 2);\r\n            float y2Trans = y2 - (Height / 2);\r\n            float x2Norm = x2Trans / (Width / 2);\r\n            float y2Norm = y2Trans / (Height / 2);\r\n            float[] vertices =\r\n            {\r\n                x1Norm, y1Norm, 0f, u1, v1,\r\n                \r\n                x2Norm, y2Norm, 0f, u2, v2\r\n            };\r\n            \r\n            var vertexBufferObject = GL.GenBuffer();\r\n            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);\r\n            GL.BufferData(BufferTarget.ArrayBuffer, vertices.Length * sizeof(float), vertices, BufferUsageHint.DynamicDraw);\r\n            \r\n            texture.Use();\r\n            _2dTextured.Use();\r\n            \r\n            var mainObject = GL.GenVertexArray();\r\n            GL.BindVertexArray(mainObject);\r\n            \r\n            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);\r\n\r\n            var positionLocation = _2dTextured.GetAttribLocation(\"aPosition\");\r\n            GL.EnableVertexAttribArray(positionLocation);\r\n            GL.VertexAttribPointer(positionLocation, 3, VertexAttribPointerType.Float, false, 5 * sizeof(float), 0);\r\n\r\n            var texCoordLocation = _2dTextured.GetAttribLocation(\"aTexCoord\");\r\n            GL.EnableVertexAttribArray(texCoordLocation);\r\n            GL.VertexAttribPointer(texCoordLocation, 2, VertexAttribPointerType.Float, false, 5 * sizeof(float), 3 * sizeof(float));\r\n            \r\n            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);\r\n            \r\n            GL.BindVertexArray(mainObject);\r\n            \r\n            texture.Use();\r\n            _2dTextured.Use();\r\n            \r\n            _2dTextured.SetVector4(\"lightColor\", new Vector4(color.R, color.G, color.B, color.A));\r\n            \r\n            GL.DrawArrays(PrimitiveType.Lines, 0, 2);\r\n            \r\n            GL.DeleteBuffer(vertexBufferObject);\r\n            GL.DeleteVertexArray(mainObject);\r\n        }\r\n        \r\n        protected void drawTexturedQuad(float x1, float y1, float z1, float u1, float v1, \r\n                                      float x2, float y2, float z2, float u2, float v2, \r\n                                      float x3, float y3, float z3, float u3, float v3,\r\n                                      float x4, float y4, float z4, float u4, float v4, string texturePath, Color4 color, TextureMinFilter min, TextureMagFilter mag)\r\n        {\r\n            Texture texture = new Texture(texturePath, min, mag);\r\n            float x1Trans = x1 - (Width / 2);\r\n            float y1Trans = y1 - (Height / 2);\r\n            float x1Norm = x1Trans / (Width / 2);\r\n            float y1Norm = y1Trans / (Height / 2);\r\n            float x2Trans = x2 - (Width / 2);\r\n            float y2Trans = y2 - (Height / 2);\r\n            float x2Norm = x2Trans / (Width / 2);\r\n            float y2Norm = y2Trans / (Height / 2);\r\n            float x3Trans = x3 - (Width / 2);\r\n            float y3Trans = y3 - (Height / 2);\r\n            float x3Norm = x3Trans / (Width / 2);\r\n            float y3Norm = y3Trans / (Height / 2);\r\n            float x4Trans = x4 - (Width / 2);\r\n            float y4Trans = y4 - (Height / 2);\r\n            float x4Norm = x4Trans / (Width / 2);\r\n            float y4Norm = y4Trans / (Height / 2);\r\n\r\n            float[] vertices =\r\n            {\r\n                x1Norm, y1Norm, z1, u1, -(v1 - 1),\r\n                x2Norm, y2Norm, z2, u2, -(v2 - 1),\r\n                x3Norm, y3Norm, z3, u3, -(v3 - 1),\r\n\r\n                x1Norm, y1Norm, z2, u1, -(v1 - 1),\r\n                x3Norm, y3Norm, z3, u3, -(v3 - 1),\r\n                x4Norm, y4Norm, z4, u4, -(v4 - 1)\r\n            };\r\n\r\n            var vertexBufferObject = GL.GenBuffer();\r\n            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);\r\n            GL.BufferData(BufferTarget.ArrayBuffer, vertices.Length * sizeof(float), vertices, BufferUsageHint.DynamicDraw);\r\n            \r\n            texture.Use();\r\n            _2dTextured.Use();\r\n            \r\n            var mainObject = GL.GenVertexArray();\r\n            GL.BindVertexArray(mainObject);\r\n            \r\n            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);\r\n\r\n            var positionLocation = _2dTextured.GetAttribLocation(\"aPosition\");\r\n            GL.EnableVertexAttribArray(positionLocation);\r\n            GL.VertexAttribPointer(positionLocation, 3, VertexAttribPointerType.Float, false, 5 * sizeof(float), 0);\r\n\r\n            var texCoordLocation = _2dTextured.GetAttribLocation(\"aTexCoord\");\r\n            GL.EnableVertexAttribArray(texCoordLocation);\r\n            GL.VertexAttribPointer(texCoordLocation, 2, VertexAttribPointerType.Float, false, 5 * sizeof(float), 3 * sizeof(float));\r\n            \r\n            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);\r\n            \r\n            GL.BindVertexArray(mainObject);\r\n            \r\n            texture.Use();\r\n            _2dTextured.Use();\r\n            \r\n            _2dTextured.SetVector4(\"lightColor\", new Vector4(color.R, color.G, color.B, color.A));\r\n\r\n            GL.DrawArrays(PrimitiveType.Triangles, 0, 6);\r\n            \r\n            GL.DeleteBuffer(vertexBufferObject);\r\n            GL.DeleteTexture(texture.Handle);\r\n            GL.DeleteVertexArray(mainObject);\r\n\r\n        }\r\n\r\n        protected void drawTexturedQuad(float x1, float y1, float z1, float u1, float v1,\r\n                                      float x2, float y2, float z2, float u2, float v2,\r\n                                      float x3, float y3, float z3, float u3, float v3,\r\n                                      float x4, float y4, float z4, float u4, float v4, Bitmap textureBitmap, Color4 color, TextureMinFilter min, TextureMagFilter mag)\r\n        {\r\n            Texture texture = new Texture(textureBitmap, min, mag);\r\n            float x1Trans = x1 - (Width / 2);\r\n            float y1Trans = y1 - (Height / 2);\r\n            float x1Norm = x1Trans / (Width / 2);\r\n            float y1Norm = y1Trans / (Height / 2);\r\n            float x2Trans = x2 - (Width / 2);\r\n            float y2Trans = y2 - (Height / 2);\r\n            float x2Norm = x2Trans / (Width / 2);\r\n            float y2Norm = y2Trans / (Height / 2);\r\n            float x3Trans = x3 - (Width / 2);\r\n            float y3Trans = y3 - (Height / 2);\r\n            float x3Norm = x3Trans / (Width / 2);\r\n            float y3Norm = y3Trans / (Height / 2);\r\n            float x4Trans = x4 - (Width / 2);\r\n            float y4Trans = y4 - (Height / 2);\r\n            float x4Norm = x4Trans / (Width / 2);\r\n            float y4Norm = y4Trans / (Height / 2);\r\n\r\n            float[] vertices =\r\n            {\r\n                x1Norm, y1Norm, z1, u1, -(v1 - 1),\r\n                x2Norm, y2Norm, z2, u2, -(v2 - 1),\r\n                x3Norm, y3Norm, z3, u3, -(v3 - 1),\r\n\r\n                x1Norm, y1Norm, z2, u1, -(v1 - 1),\r\n                x3Norm, y3Norm, z3, u3, -(v3 - 1),\r\n                x4Norm, y4Norm, z4, u4, -(v4 - 1)\r\n            };\r\n\r\n            var vertexBufferObject = GL.GenBuffer();\r\n            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);\r\n            GL.BufferData(BufferTarget.ArrayBuffer, vertices.Length * sizeof(float), vertices, BufferUsageHint.DynamicDraw);\r\n\r\n            texture.Use();\r\n            _2dTextured.Use();\r\n\r\n            var mainObject = GL.GenVertexArray();\r\n            GL.BindVertexArray(mainObject);\r\n\r\n            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);\r\n\r\n            var positionLocation = _2dTextured.GetAttribLocation(\"aPosition\");\r\n            GL.EnableVertexAttribArray(positionLocation);\r\n            GL.VertexAttribPointer(positionLocation, 3, VertexAttribPointerType.Float, false, 5 * sizeof(float), 0);\r\n\r\n            var texCoordLocation = _2dTextured.GetAttribLocation(\"aTexCoord\");\r\n            GL.EnableVertexAttribArray(texCoordLocation);\r\n            GL.VertexAttribPointer(texCoordLocation, 2, VertexAttribPointerType.Float, false, 5 * sizeof(float), 3 * sizeof(float));\r\n\r\n            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);\r\n\r\n            GL.BindVertexArray(mainObject);\r\n\r\n            texture.Use();\r\n            _2dTextured.Use();\r\n\r\n            _2dTextured.SetVector4(\"lightColor\", new Vector4(color.R, color.G, color.B, color.A));\r\n\r\n            GL.DrawArrays(PrimitiveType.Triangles, 0, 6);\r\n\r\n            GL.DeleteBuffer(vertexBufferObject);\r\n            GL.DeleteTexture(texture.Handle);\r\n            GL.DeleteVertexArray(mainObject);\r\n\r\n        }\r\n\r\n        protected void drawTexturedQuad(float x1, float y1, float z1, float u1, float v1,\r\n                                      float x2, float y2, float z2, float u2, float v2,\r\n                                      float x3, float y3, float z3, float u3, float v3,\r\n                                      float x4, float y4, float z4, float u4, float v4, Texture texture, Color4 color)\r\n        {\r\n            float x1Trans = x1 - (Width / 2);\r\n            float y1Trans = y1 - (Height / 2);\r\n            float x1Norm = x1Trans / (Width / 2);\r\n            float y1Norm = y1Trans / (Height / 2);\r\n            float x2Trans = x2 - (Width / 2);\r\n            float y2Trans = y2 - (Height / 2);\r\n            float x2Norm = x2Trans / (Width / 2);\r\n            float y2Norm = y2Trans / (Height / 2);\r\n            float x3Trans = x3 - (Width / 2);\r\n            float y3Trans = y3 - (Height / 2);\r\n            float x3Norm = x3Trans / (Width / 2);\r\n            float y3Norm = y3Trans / (Height / 2);\r\n            float x4Trans = x4 - (Width / 2);\r\n            float y4Trans = y4 - (Height / 2);\r\n            float x4Norm = x4Trans / (Width / 2);\r\n            float y4Norm = y4Trans / (Height / 2);\r\n\r\n            float[] vertices =\r\n            {\r\n                x1Norm, y1Norm, z1, u1, -(v1 - 1),\r\n                x2Norm, y2Norm, z2, u2, -(v2 - 1),\r\n                x3Norm, y3Norm, z3, u3, -(v3 - 1),\r\n\r\n                x1Norm, y1Norm, z2, u1, -(v1 - 1),\r\n                x3Norm, y3Norm, z3, u3, -(v3 - 1),\r\n                x4Norm, y4Norm, z4, u4, -(v4 - 1)\r\n            };\r\n\r\n            var vertexBufferObject = GL.GenBuffer();\r\n            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);\r\n            GL.BufferData(BufferTarget.ArrayBuffer, vertices.Length * sizeof(float), vertices, BufferUsageHint.DynamicDraw);\r\n\r\n            texture.Use();\r\n            _2dTextured.Use();\r\n\r\n            var mainObject = GL.GenVertexArray();\r\n            GL.BindVertexArray(mainObject);\r\n\r\n            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);\r\n\r\n            var positionLocation = _2dTextured.GetAttribLocation(\"aPosition\");\r\n            GL.EnableVertexAttribArray(positionLocation);\r\n            GL.VertexAttribPointer(positionLocation, 3, VertexAttribPointerType.Float, false, 5 * sizeof(float), 0);\r\n\r\n            var texCoordLocation = _2dTextured.GetAttribLocation(\"aTexCoord\");\r\n            GL.EnableVertexAttribArray(texCoordLocation);\r\n            GL.VertexAttribPointer(texCoordLocation, 2, VertexAttribPointerType.Float, false, 5 * sizeof(float), 3 * sizeof(float));\r\n\r\n            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);\r\n\r\n            GL.BindVertexArray(mainObject);\r\n\r\n            texture.Use();\r\n            _2dTextured.Use();\r\n\r\n            _2dTextured.SetVector4(\"lightColor\", new Vector4(color.R, color.G, color.B, color.A));\r\n\r\n            GL.DrawArrays(PrimitiveType.Triangles, 0, 6);\r\n\r\n            GL.DeleteBuffer(vertexBufferObject);\r\n            GL.DeleteVertexArray(mainObject);\r\n\r\n        }\r\n\r\n        protected void drawQuad(float x1, float y1, float z1, \r\n                                float x2, float y2, float z2, \r\n                                float x3, float y3, float z3,\r\n                                float x4, float y4, float z4, Color4 color)\r\n        {\r\n            float x1Trans = x1 - (Width / 2);\r\n            float y1Trans = y1 - (Height / 2);\r\n            float x1Norm = x1Trans / (Width / 2);\r\n            float y1Norm = y1Trans / (Height / 2);\r\n            float x2Trans = x2 - (Width / 2);\r\n            float y2Trans = y2 - (Height / 2);\r\n            float x2Norm = x2Trans / (Width / 2);\r\n            float y2Norm = y2Trans / (Height / 2);\r\n            float x3Trans = x3 - (Width / 2);\r\n            float y3Trans = y3 - (Height / 2);\r\n            float x3Norm = x3Trans / (Width / 2);\r\n            float y3Norm = y3Trans / (Height / 2);\r\n            float x4Trans = x4 - (Width / 2);\r\n            float y4Trans = y4 - (Height / 2);\r\n            float x4Norm = x4Trans / (Width / 2);\r\n            float y4Norm = y4Trans / (Height / 2);\r\n                    \r\n            float[] vertices =\r\n            {\r\n                x1Norm, y1Norm, z1,\r\n                x2Norm, y2Norm, z2,\r\n                x3Norm, y3Norm, z3,\r\n                        \r\n                x2Norm, y2Norm, z2,\r\n                x3Norm, y3Norm, z3,\r\n                x4Norm, y4Norm, z4\r\n            };\r\n                    \r\n            var vertexBufferObject = GL.GenBuffer();\r\n            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);\r\n            GL.BufferData(BufferTarget.ArrayBuffer, vertices.Length * sizeof(float), vertices, BufferUsageHint.DynamicDraw);\r\n                    \r\n            _2dShader.Use();\r\n                    \r\n            var mainObject = GL.GenVertexArray();\r\n            GL.BindVertexArray(mainObject);\r\n                    \r\n            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);\r\n        \r\n            var positionLocation = _2dShader.GetAttribLocation(\"aPos\");\r\n            GL.EnableVertexAttribArray(positionLocation);\r\n            GL.VertexAttribPointer(positionLocation, 3, VertexAttribPointerType.Float, false, 3 * sizeof(float), 0);\r\n                    \r\n                    \r\n            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);\r\n                    \r\n            GL.BindVertexArray(mainObject);\r\n                    \r\n            _2dShader.Use();\r\n                    \r\n            _2dShader.SetVector4(\"lightColor\", new Vector4(color.R, color.G, color.B, color.A));\r\n        \r\n            GL.DrawArrays(PrimitiveType.Triangles, 0, 6);\r\n                    \r\n            GL.DeleteBuffer(vertexBufferObject);\r\n            GL.DeleteVertexArray(mainObject);\r\n        \r\n        }\r\n        \r\n        protected void drawEllipse(float x, float y, float radiusX, float radiusY, Color4 color)\r\n        {\r\n            int numEllipseVertices = (int)Math.Floor(Math.Sqrt(radiusX * radiusX + radiusY * radiusY));\r\n            Vector3[] tempVertices = new Vector3[numEllipseVertices];\r\n            \r\n            float xTrans = x - (Width / 2);\r\n            float yTrans = y - (Height / 2);\r\n            float xNorm = xTrans / (Width / 2);\r\n            float yNorm = yTrans / (Height / 2);\r\n            float radiusXNorm = radiusX / (Width / 2);\r\n            float radiusYNorm = radiusY / (Height / 2);\r\n\r\n\r\n            var step = (float)(Math.PI * 2) / (numEllipseVertices - 1);\r\n            \r\n            for(var i=0; i < numEllipseVertices; i++)\r\n            {\r\n                var rad = i * step;\r\n                tempVertices[i] = new Vector3(((float) Math.Cos(rad) * radiusXNorm) + xNorm, ((float) Math.Sin(rad) * radiusYNorm) - yNorm, 0.0f);\r\n            }\r\n            \r\n\r\n            var tempVerticesList = new List<float> {xNorm, -yNorm, 0f,};\r\n            for (var i = 0; i < numEllipseVertices; i++)\r\n            {\r\n                tempVerticesList.AddRange(new []\r\n                {\r\n                    tempVertices[i].X, tempVertices[i].Y, tempVertices[i].Z,\r\n                });\r\n            }\r\n\r\n            var vertices = tempVerticesList.ToArray();\r\n            \r\n\r\n            var vertexBufferObject = GL.GenBuffer();\r\n            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);\r\n            GL.BufferData(BufferTarget.ArrayBuffer, vertices.Length * sizeof(float), vertices, BufferUsageHint.DynamicDraw);\r\n\r\n            _2dShader.Use();\r\n            \r\n            var mainObject = GL.GenVertexArray();\r\n            GL.BindVertexArray(mainObject);\r\n\r\n            var positionLocation = _2dShader.GetAttribLocation(\"aPos\");\r\n            GL.EnableVertexAttribArray(positionLocation);\r\n            GL.VertexAttribPointer(positionLocation, 3, VertexAttribPointerType.Float, false, 3 * sizeof(float), 0);\r\n\r\n            \r\n            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);\r\n\r\n            GL.BindVertexArray(mainObject);\r\n            \r\n            _2dShader.SetVector4(\"lightColor\", new Vector4(color.R, color.G, color.B, color.A));\r\n            \r\n            _2dShader.Use();\r\n            GL.DrawArrays(PrimitiveType.TriangleFan, 0, numEllipseVertices + 1);\r\n            \r\n            GL.DeleteBuffer(vertexBufferObject);\r\n            GL.DeleteVertexArray(mainObject);\r\n        }\r\n\r\n        public void drawTriangle(float x1, float y1, float x2, float y2, float x3, float y3, Color4 color)\r\n        {\r\n            float x1Trans = x1 - (Width / 2);\r\n            float y1Trans = y1 - (Height / 2);\r\n            float x1Norm = x1Trans / (Width / 2);\r\n            float y1Norm = y1Trans / (Height / 2);\r\n            float x2Trans = x2 - (Width / 2);\r\n            float y2Trans = y2 - (Height / 2);\r\n            float x2Norm = x2Trans / (Width / 2);\r\n            float y2Norm = y2Trans / (Height / 2);\r\n            float x3Trans = x3 - (Width / 2);\r\n            float y3Trans = y3 - (Height / 2);\r\n            float x3Norm = x3Trans / (Width / 2);\r\n            float y3Norm = y3Trans / (Height / 2);\r\n            float[] vertices =\r\n            {\r\n                x1Norm, -y1Norm, 0f,\r\n                x2Norm, -y2Norm, 0f,\r\n                x3Norm, -y3Norm, 0f,\r\n            };\r\n\r\n            var vertexBufferObject = GL.GenBuffer();\r\n            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);\r\n            GL.BufferData(BufferTarget.ArrayBuffer, vertices.Length * sizeof(float), vertices, BufferUsageHint.DynamicDraw);\r\n\r\n            _2dShader.Use();\r\n            \r\n            var mainObject = GL.GenVertexArray();\r\n            GL.BindVertexArray(mainObject);\r\n\r\n            var positionLocation = _2dShader.GetAttribLocation(\"aPos\");\r\n            GL.EnableVertexAttribArray(positionLocation);\r\n            GL.VertexAttribPointer(positionLocation, 3, VertexAttribPointerType.Float, false, 3 * sizeof(float), 0);\r\n\r\n            \r\n            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);\r\n\r\n            GL.BindVertexArray(mainObject);\r\n            \r\n            _2dShader.SetVector4(\"lightColor\", new Vector4(color.R, color.G, color.B, color.A));\r\n            \r\n            _2dShader.Use();\r\n            GL.DrawArrays(PrimitiveType.Triangles, 0, 3);\r\n            \r\n            GL.DeleteBuffer(vertexBufferObject);\r\n            GL.DeleteVertexArray(mainObject);\r\n\r\n        }\r\n        protected void Clear()\r\n        {\r\n            GL.Clear(ClearBufferMask.ColorBufferBit | ClearBufferMask.DepthBufferBit);\r\n        }\r\n\r\n        public void drawText(string text, int px, float x, float y, Font f, Color4 col)\r\n        {\r\n            byte[] ids = Encoding.ASCII.GetBytes(text);\r\n            int xoff = 0;\r\n            foreach (byte b in ids)\r\n            {\r\n                int i = Array.IndexOf(f.data[\"ids\"], b);\r\n                float u = (float)f.data[\"xs\"][i] / (float)f.fontWidth;\r\n                float v = (float)f.data[\"ys\"][i] / (float)f.fontWidth;\r\n                int width = (int)(((float)px / (float)f.data[\"heights\"][i]) * f.data[\"widths\"][i]);\r\n                int height = px;\r\n                float uoff = u + ((float)f.data[\"widths\"][i] / (float)f.fontWidth);\r\n                float voff = v - ((float)f.data[\"heights\"][i] / (float)f.fontWidth);\r\n\r\n                drawTexturedQuad(\r\n                    x + xoff        , y         , 1f, u   , voff,\r\n                    x + xoff        , y + height, 1f, u   , v,\r\n                    x + width + xoff, y + height, 1f, uoff, v,\r\n                    x + width + xoff, y         , 1f, uoff, voff, f.font, col);\r\n\r\n                xoff += width;            \r\n            }\r\n        }\r\n\r\n        \r\n        \r\n        \r\n        public class Font\r\n        {\r\n            public Dictionary<string, int[]> data = new Dictionary<string, int[]>();\r\n            public Texture font;\r\n            public int fontWidth;\r\n\r\n            public Font(string path, string path2)\r\n            {\r\n                data = new Dictionary<string, int[]>();\r\n                font = new Texture(path2, TextureMinFilter.Nearest, TextureMagFilter.Nearest);\r\n                Bitmap b = new Bitmap(path2);\r\n                using (StreamReader file = new StreamReader(path))\r\n                {\r\n                    fontWidth = b.Width;\r\n                    string ln;\r\n                    List<int> ids = new List<int>();\r\n                    List<int> xs = new List<int>();\r\n                    List<int> ys = new List<int>();\r\n                    List<int> widths = new List<int>();\r\n                    List<int> heights = new List<int>();\r\n\r\n\r\n                    while ((ln = file.ReadLine()) != null)\r\n                    {\r\n                        if (ln.Substring(0, 5) == \"char \")\r\n                        {\r\n                            string Data = ln.Substring(5);\r\n                            string[] d = Data.Split(\" \");\r\n                            List<int> f = new List<int>();\r\n                            foreach (string l in d)\r\n                            {\r\n                                if (l.Contains(\"=\"))\r\n                                {\r\n                                    string[] newL = l.Split(\"=\");\r\n                                    Regex.Replace(newL[1], @\"\\s+\", \"\");\r\n                                    f.Add(int.Parse(newL[1]));\r\n                                }\r\n                            }\r\n                            ids.Add(f[0]);\r\n                            xs.Add(f[1]);\r\n                            ys.Add(-(f[2] - fontWidth));\r\n                            widths.Add(f[3]);\r\n                            heights.Add(f[4]);\r\n                        }\r\n                    }\r\n\r\n                    data.Add(\"ids\", ids.ToArray());\r\n                    data.Add(\"xs\", xs.ToArray());\r\n                    data.Add(\"ys\", ys.ToArray());\r\n                    data.Add(\"widths\", widths.ToArray());\r\n                    data.Add(\"heights\", heights.ToArray());\r\n                    file.Close();\r\n                }\r\n            }\r\n\r\n            public void Dispose()\r\n            {\r\n                GL.DeleteTexture(font.Handle);\r\n            }\r\n\r\n        }\r\n\r\n        \r\n\r\n        public int getPhraseLength(string text, int px, Font f)\r\n        {\r\n            byte[] ids = Encoding.ASCII.GetBytes(text);\r\n            int xoff = 0;\r\n            foreach (byte b in ids)\r\n            {\r\n                int i = Array.IndexOf(f.data[\"ids\"], b);\r\n                int width = (int)(((float)px / (float)f.data[\"heights\"][i]) * f.data[\"widths\"][i]);\r\n\r\n                xoff += width;\r\n            }\r\n            return xoff;\r\n        }\r\n\r\n        public Settings set = new Settings();\r\n\r\n        public void showSettings(Settings s)\r\n        {\r\n            var w = Convert.ToInt32(s.settings[\"width\"]);\r\n            var h = Convert.ToInt32(s.settings[\"height\"]);\r\n            Vector2 pos = new Vector2((Width - w) / 2, (Height - h) / 2);\r\n            if (Convert.ToBoolean(s.settings[\"useTexture\"]))\r\n            {\r\n                var path = Convert.ToString(s.settings[\"texturePath\"]);\r\n                drawTexturedRectangle(pos.X, pos.Y, 0, 0, pos.X + w, pos.Y + h, 1, 1, path, Color4.White, TextureMinFilter.Nearest, TextureMagFilter.Nearest);\r\n            }\r\n            else\r\n            {\r\n                Color4 col = new Color4(Convert.ToInt32(s.settings[\"r\"]), Convert.ToInt32(s.settings[\"g\"]), Convert.ToInt32(s.settings[\"b\"]), Convert.ToInt32(s.settings[\"a\"]));\r\n                drawRectangle(pos.X, pos.Y, pos.X + w, pos.Y + h, col);\r\n            }\r\n            foreach (Settings.Button b in s.buttons)\r\n            {\r\n                var x = b.pos.X + pos.X;\r\n                var y = b.pos.Y + pos.Y;\r\n                drawRectangle(x, y, x + b.width, y + b.height, b.col);\r\n                if(b.l == -1)\r\n                {\r\n                    b.l = getPhraseLength(b.Text, Math.Min(b.height, 32), b.font);\r\n                }\r\n                drawText(b.Text, Math.Min(b.height, 32), x + ((b.width - b.l) / 2), y + ((b.height - Math.Min(b.height, 32)) / 2), b.font, Color4.White);\r\n                b.setCol(Color4.Blue);\r\n\r\n            }\r\n        }\r\n\r\n        public class Settings\r\n        {\r\n            public List<Button> buttons = new List<Button>();\r\n            public Dictionary<string, object> settings = new Dictionary<string, object>();\r\n\r\n            public class Button\r\n            {\r\n                public Vector2 pos;\r\n                public string Text;\r\n                public int width, height, l;\r\n                public Func<object> onClick;\r\n                public Color4 col;\r\n                public Font font;\r\n\r\n                public void setCol(Color4 c)\r\n                {\r\n                    col = c;\r\n                }\r\n            }\r\n\r\n            public void addButton(string t, float x, float y, int w, int h, Color4 c, Func<object> func, Font f)\r\n            {\r\n                buttons.Add(new Button { pos = new Vector2(x, y), width = w, height = h, onClick = func, col = c, Text = t, l = -1 , font = f});\r\n            }\r\n\r\n            public void addSetting(string key, object value)\r\n            {\r\n                settings.Add(key, value);\r\n            }\r\n\r\n            public void readSettings()\r\n            {\r\n                try\r\n                {\r\n                    using (StreamReader file = new StreamReader(\"settings.cfg\"))\r\n                    {\r\n                        settings = new Dictionary<string, object>();\r\n                        string ln;\r\n                        while ((ln = file.ReadLine()) != null)\r\n                        {\r\n                            if (ln[0] != '#')\r\n                            {\r\n                                var values = ln.Split(\"=\");\r\n                                Regex rx = new Regex(@\"^[\\d.]+$\");\r\n                                if (rx.IsMatch(values[1]))\r\n                                {\r\n\r\n                                    settings.Add(values[0], float.Parse(values[1]));\r\n                                }\r\n                                else\r\n                                {\r\n                                    settings.Add(values[0], values[1]);\r\n                                }\r\n                            }\r\n                            \r\n\r\n                        }\r\n                    }\r\n                }\r\n                catch (InvalidCastException e)\r\n                {\r\n                    Console.WriteLine(e.GetBaseException());\r\n                }\r\n            }\r\n\r\n            public void writeSettings()\r\n            {\r\n                try\r\n                {\r\n                    using (FileStream fs = File.Create(\"settings.cfg\"))\r\n                    {\r\n                        string final = \"\";\r\n\r\n                        foreach (KeyValuePair<string, object> entry in settings)\r\n                        {\r\n                            final += entry.Key + \"=\" + entry.Value + \"\\n\";\r\n                        }\r\n\r\n                        byte[] info = new UTF8Encoding(true).GetBytes(final);\r\n                        fs.Write(info, 0, info.Length);\r\n                    }\r\n                }\r\n\r\n                catch (Exception ex)\r\n                {\r\n                    Console.WriteLine(ex.ToString());\r\n                }\r\n            }\r\n\r\n        }\r\n        private void checkClicks(Settings s)\r\n        {\r\n            var w = Convert.ToInt32(s.settings[\"width\"]);\r\n            var h = Convert.ToInt32(s.settings[\"height\"]);\r\n            foreach (Settings.Button b in s.buttons)\r\n            {\r\n                Vector2 pos = new Vector2((Width - w) / 2, (Height - h) / 2);\r\n                var mouseState = Mouse.GetCursorState();\r\n                var x = mouseState.X - X - 8 - pos.X;\r\n                var y = -(mouseState.Y - Y - 30 - Height) - pos.Y;\r\n                if (x >= b.pos.X && x <= b.pos.X + b.width && y >= b.pos.Y && y <= b.pos.Y + b.height)\r\n                {\r\n                    b.setCol(Color4.Red);\r\n                    b.onClick.Invoke();\r\n                }\r\n            }\r\n        }    \r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Program/MainRenderWindow.cs	(revision cb0a3442d5c36152c334a82b3a1b39ee4d1ba2cb)
+++ Program/MainRenderWindow.cs	(date 1604253698916)
@@ -1,1586 +1,1723 @@
+// Decompiled with JetBrains decompiler
+// Type: Program.MainRenderWindow
+// Assembly: Program, Version=1.7.0.0, Culture=neutral, PublicKeyToken=null
+// MVID: AF30FF81-E0B0-4B54-A928-DD8AA8C2D21D
+// Assembly location: C:\Users\Hugo Teixeira\.nuget\packages\opentk.3d.library\1.7.0\lib\netcoreapp3.1\Program.dll
+
+using OpenTK;
+using OpenTK.Graphics;
+using OpenTK.Graphics.OpenGL;
+using OpenTK.Input;
 using System;
 using System.Collections.Generic;
 using System.Drawing;
 using System.IO;
 using System.Text;
 using System.Text.RegularExpressions;
-using Newtonsoft.Json;
-using OpenTK;
-using OpenTK.Graphics;
-using OpenTK.Graphics.OpenGL;
-using OpenTK.Input;
-using Boolean = System.Boolean;
 
 namespace Program
 {
-    public class MainRenderWindow : GameWindow
-    {
-        private readonly List<TexturedObject> _mainTexturedObjects = new List<TexturedObject>();
-        private readonly List<Object> _mainObjects = new List<Object>();
-        private Lamp _mainLamp;
-        private Shader _lampShader, _lightingShader, _textureShader, _2dShader, _2dTextured;
-        private Camera _camera;
-        private bool _firstMove = true;
-        private Vector2 _lastPos;
-        protected Boolean RenderLight = false;
-        private float cameraSpeed = 20f;
-        private float sensitivity = 0.2f;
-        protected Boolean UseDepthTest = false, UseAlpha = true, KeyboardAndMouseInput = true, loadedFont = false, showSet = false, lastTime = true, useSettings = false;
-
+  public class MainRenderWindow : GameWindow
+  {
+    private readonly List<MainRenderWindow.TexturedObject> _mainTexturedObjects = new List<MainRenderWindow.TexturedObject>();
+    private readonly List<MainRenderWindow.Object> _mainObjects = new List<MainRenderWindow.Object>();
+    private MainRenderWindow.Lamp _mainLamp;
+    private Shader _lampShader;
+    private Shader _lightingShader;
+    private Shader _textureShader;
+    private Shader _2dShader;
+    private Shader _2dTextured;
+    private Camera _camera;
+    private bool _firstMove = true;
+    private Vector2 _lastPos;
+    protected bool RenderLight;
+    private float cameraSpeed = 20f;
+    private float sensitivity = 0.2f;
+    protected bool UseDepthTest = true;
+    protected bool UseAlpha = true;
+    protected bool KeyboardAndMouseInput = true;
+    protected bool loadedFont;
+    protected bool showSet;
+    protected bool lastTime = true;
+    protected bool useSettings;
+    public MainRenderWindow.Settings set = new MainRenderWindow.Settings();
 
-        protected MainRenderWindow(int width, int height, string title)
-            : base(width, height, GraphicsMode.Default, title)
-        {
-        }
-        
-        protected override void OnLoad(EventArgs e)
-        {
-            if(UseDepthTest) {GL.Enable(EnableCap.DepthTest);}
-            if(UseAlpha) {GL.BlendFunc(BlendingFactor.SrcAlpha, BlendingFactor.OneMinusSrcAlpha);}
-            GL.Enable(EnableCap.Blend);
-            _lightingShader = new Shader(Shaders.ShaderVert, Shaders.LightingFrag);
-            _lampShader = new Shader(Shaders.ShaderVert, Shaders.ShaderFrag);
-            _2dShader = new Shader(Shaders.Shader2DVert, Shaders.Shader2DFrag);
-            _textureShader = new Shader(Shaders.TextureVert, Shaders.TextureFrag);
-            _2dTextured = new Shader(Shaders.Texture2DVert, Shaders.Texture2DFrag);
-            _lightingShader.Use();
-            _lampShader.Use();
-            _textureShader.Use();
-            _2dShader.Use();
-            _2dTextured.Use();
-                                                        
-            _camera = new Camera(Vector3.UnitZ * 3, Width / (float)Height);
-            
-            CursorVisible = !KeyboardAndMouseInput;
-        }
+    protected MainRenderWindow(int width, int height, string title)
+      : base(width, height, GraphicsMode.Default, title)
+    {
+    }
+
+    protected override void OnLoad(EventArgs e)
+    {
+      Console.WriteLine("Test1");
+
+      if (this.UseDepthTest)
+        GL.Enable(EnableCap.DepthTest);
+      if (this.UseAlpha)
+        GL.BlendFunc(BlendingFactor.SrcAlpha, BlendingFactor.OneMinusSrcAlpha);
+      GL.Enable(EnableCap.Blend);
+      Console.WriteLine("Test1");
+      //this._lightingShader = new Shader(Shaders.ShaderVert, Shaders.LightingFrag);
+      Console.WriteLine("Test2");
+      //this._lampShader = new Shader(Shaders.ShaderVert, Shaders.ShaderFrag);
+      Console.WriteLine("Test3");
+      //this._2dShader = new Shader(Shaders.Shader2DVert, Shaders.Shader2DFrag);
+      Console.WriteLine("Test4");
+      //this._textureShader = new Shader(Shaders.TextureVert, Shaders.TextureFrag);
+      Console.WriteLine("Test5");
+      //this._2dTextured = new Shader(Shaders.Texture2DVert, Shaders.Texture2DFrag);
+      Console.WriteLine("Test1");
+      //this._lightingShader.Use();
+      //this._lampShader.Use();
+      //this._textureShader.Use();
+      //this._2dShader.Use();
+      //this._2dTextured.Use();
+      this._camera = new Camera(Vector3.UnitZ * 3f, (float) this.Width / (float) this.Height);
+      this.CursorVisible = !this.KeyboardAndMouseInput;
+    }
 
-        protected void setClearColor(Color4 color)
-        {
-            GL.ClearColor(color);
+    protected void setClearColor(Color4 color) => GL.ClearColor(color);
 
-        }
-        protected override void OnRenderFrame(FrameEventArgs e)
-        {
-            if (RenderLight) { _mainLamp.show(_camera, _lampShader); }
-
-            foreach (Object obj in _mainObjects)
-            {
-                obj.show(_camera);
-            }
-            foreach (TexturedObject obj in _mainTexturedObjects)
-            {
-                obj.show(_camera);
-            }
-
-            if (showSet)
-            {
-                var mouse = Mouse.GetState();
-                if (mouse.IsButtonDown(MouseButton.Left))
-                {
-                    checkClicks(set);
-                }
-                showSettings(set);
-            }
-
-            SwapBuffers();
-
-            base.OnRenderFrame(e);
-        }
-        protected override void OnUpdateFrame(FrameEventArgs e)
-        {
-
-            if (!Focused) // check to see if the window is focused
-            {
-                return;
-            }
-            var input = Keyboard.GetState();
-            var mouse = Mouse.GetState();
-
-            if (input.IsKeyDown(Key.Escape) && lastTime)
-            {
-                if (!useSettings)
-                {
-                    //Exit();
-                }
-                else
-                {
-                    showSet = !showSet;
-                    lastTime = false;
-                }
-                
-            }
-            if (input.IsKeyUp(Key.Escape))
-            {
-                lastTime = true;
-            }
-
-            
-
-
-            if (KeyboardAndMouseInput)
-            {
-                
-                if (input.IsKeyDown(Key.W))
-                {
-                    _camera.Position += _camera.Front * cameraSpeed * (float) e.Time; // Forward
-                }
-
-                if (input.IsKeyDown(Key.S))
-                {
-                    _camera.Position -= _camera.Front * cameraSpeed * (float) e.Time; // Backwards
-                }
-
-                if (input.IsKeyDown(Key.A))
-                {
-                    _camera.Position -= _camera.Right * cameraSpeed * (float) e.Time; // Left
-                }
-
-                if (input.IsKeyDown(Key.D))
-                {
-                    _camera.Position += _camera.Right * cameraSpeed * (float) e.Time; // Right
-                }
-
-                if (input.IsKeyDown(Key.Space))
-                {
-                    _camera.Position += _camera.Up * cameraSpeed * (float) e.Time; // Up
-                }
-
-                if (input.IsKeyDown(Key.LShift))
-                {
-                    _camera.Position -= _camera.Up * cameraSpeed * (float) e.Time; // Down
-                }
-
-                // Get the mouse state
-
-                if (_firstMove) // this bool variable is initially set to true
-                {
-                    _lastPos = new Vector2(mouse.X, mouse.Y);
-                    _firstMove = false;
-                }
-                else
-                {
-                    // Calculate the offset of the mouse position
-                    var deltaX = mouse.X - _lastPos.X;
-                    var deltaY = mouse.Y - _lastPos.Y;
-                    _lastPos = new Vector2(mouse.X, mouse.Y);
-
-                    // Apply the camera pitch and yaw (we clamp the pitch in the camera class)
-                    _camera.Yaw += deltaX * sensitivity;
-                    _camera.Pitch -= deltaY * sensitivity; // reversed since y-coordinates range from bottom to top
-                }
-
-                
-
-                Mouse.SetPosition(1920 / 2, 1080 / 2);
-            }
-            base.OnUpdateFrame(e);
-        }
-        protected override void OnResize(EventArgs e)
-        {
-            GL.Viewport(0, 0, Width, Height);
-            base.OnResize(e);
-        }
-        protected override void OnUnload(EventArgs e)
-        {
-            GL.BindBuffer(BufferTarget.ArrayBuffer, 0);
-            GL.BindVertexArray(0);
-            GL.UseProgram(0);
-
-
-            GL.DeleteProgram(_lampShader.Handle);
-            GL.DeleteProgram(_lightingShader.Handle);
-            GL.DeleteProgram(_2dShader.Handle);
-            GL.DeleteProgram(_textureShader.Handle);
-
-            foreach(Object obj in _mainObjects)
-            {
-                obj.Dispose();
-            }
-            foreach(TexturedObject obj in _mainTexturedObjects)
-            {
-                obj.Dispose();
-            }
-
-            _mainLamp?.Dispose();
-
-            base.OnUnload(e);
-        }
-        private static float[] loadObj(string path)
-        {
-            string[] lines = System.IO.File.ReadAllLines(path);
-            List<float[]> vertices = new List<float[]>();
-            List<float> final = new List<float>();
-            foreach (string line in lines)
-            {
-                string[] lineSlitted = line.Split(" ");
-                if (lineSlitted[0] == "v")
-                {
-                    float[] toAdd = new float[3];
-                    toAdd[0] = (float.Parse(lineSlitted[1]));
-                    toAdd[1] = (float.Parse(lineSlitted[2]));
-                    toAdd[2] = (float.Parse(lineSlitted[3]));
-                    vertices.Add(toAdd);
-                }
-                if (lineSlitted[0] == "f")
-                {
-                    string[] t1 = lineSlitted[1].Split("//");
-                    string[] t2 = lineSlitted[2].Split("//");
-                    string[] t3 = lineSlitted[3].Split("//");
-
-
-
-                    float[] v1 = vertices[int.Parse(t1[0]) - 1];
-                    float[] v2 = vertices[int.Parse(t2[0]) - 1];
-                    float[] v3 = vertices[int.Parse(t3[0]) - 1];
-
-                    Vector3 v01 = new Vector3(v1[0], v1[1], v1[2]);
-                    Vector3 v02 = new Vector3(v2[0], v2[1], v2[2]);
-                    Vector3 v03 = new Vector3(v3[0], v3[1], v3[2]);
-
-                    Vector3 l1 = v02 - v01;
-                    Vector3 l2 = v03 - v01;
-
-                    Vector3 n = Vector3.Cross(l2, l1);
-
-                    final.Add(v1[0]); final.Add(v1[1]); final.Add(v1[2]); final.Add(n.X); final.Add(n.Y); final.Add(n.Z);
-                    final.Add(v2[0]); final.Add(v2[1]); final.Add(v2[2]); final.Add(n.X); final.Add(n.Y); final.Add(n.Z);
-                    final.Add(v3[0]); final.Add(v3[1]); final.Add(v3[2]); final.Add(n.X); final.Add(n.Y); final.Add(n.Z);
-                }
-
-            }
-
+    protected override void OnRenderFrame(FrameEventArgs e)
+    {
+      if (this.RenderLight)
+        this._mainLamp.show(this._camera, this._lampShader);
+      foreach (MainRenderWindow.Object mainObject in this._mainObjects)
+        mainObject.show(this._camera);
+      foreach (MainRenderWindow.TexturedObject mainTexturedObject in this._mainTexturedObjects)
+        mainTexturedObject.show(this._camera);
+      if (this.showSet)
+      {
+        if (Mouse.GetState().IsButtonDown(MouseButton.Left))
+          this.checkClicks(this.set);
+        this.showSettings(this.set);
+      }
+      this.SwapBuffers();
+      base.OnRenderFrame(e);
+    }
+
+    protected override void OnUpdateFrame(FrameEventArgs e)
+    {
+      if (!this.Focused)
+        return;
+      KeyboardState state1 = Keyboard.GetState();
+      MouseState state2 = Mouse.GetState();
+      if (state1.IsKeyDown(Key.Escape) && this.lastTime && this.useSettings)
+      {
+        this.showSet = !this.showSet;
+        this.lastTime = false;
+      }
+      if (state1.IsKeyUp(Key.Escape))
+        this.lastTime = true;
+      if (this.KeyboardAndMouseInput)
+      {
+        if (state1.IsKeyDown(Key.W))
+          this._camera.Position += this._camera.Front * this.cameraSpeed * (float) e.Time;
+        if (state1.IsKeyDown(Key.S))
+          this._camera.Position -= this._camera.Front * this.cameraSpeed * (float) e.Time;
+        if (state1.IsKeyDown(Key.A))
+          this._camera.Position -= this._camera.Right * this.cameraSpeed * (float) e.Time;
+        if (state1.IsKeyDown(Key.D))
+          this._camera.Position += this._camera.Right * this.cameraSpeed * (float) e.Time;
+        if (state1.IsKeyDown(Key.Space))
+          this._camera.Position += this._camera.Up * this.cameraSpeed * (float) e.Time;
+        if (state1.IsKeyDown(Key.ShiftLeft))
+          this._camera.Position -= this._camera.Up * this.cameraSpeed * (float) e.Time;
+        if (this._firstMove)
+        {
+          this._lastPos = new Vector2((float) state2.X, (float) state2.Y);
+          this._firstMove = false;
+        }
+        else
+        {
+          float num1 = (float) state2.X - this._lastPos.X;
+          float num2 = (float) state2.Y - this._lastPos.Y;
+          this._lastPos = new Vector2((float) state2.X, (float) state2.Y);
+          this._camera.Yaw += num1 * this.sensitivity;
+          this._camera.Pitch -= num2 * this.sensitivity;
+        }
+        Mouse.SetPosition(960.0, 540.0);
+      }
+      base.OnUpdateFrame(e);
+    }
+
+    protected override void OnResize(EventArgs e)
+    {
+      GL.Viewport(0, 0, this.Width, this.Height);
+      base.OnResize(e);
+    }
+
+    protected override void OnUnload(EventArgs e)
+    {
+      GL.BindBuffer(BufferTarget.ArrayBuffer, 0);
+      GL.BindVertexArray(0);
+      GL.UseProgram(0);
+      GL.DeleteProgram(this._lampShader.Handle);
+      GL.DeleteProgram(this._lightingShader.Handle);
+      GL.DeleteProgram(this._2dShader.Handle);
+      GL.DeleteProgram(this._textureShader.Handle);
+      foreach (MainRenderWindow.Object mainObject in this._mainObjects)
+        mainObject.Dispose();
+      foreach (MainRenderWindow.TexturedObject mainTexturedObject in this._mainTexturedObjects)
+        mainTexturedObject.Dispose();
+      this._mainLamp?.Dispose();
+      base.OnUnload(e);
+    }
+
+    private static float[] loadObj(string path)
+    {
+      string[] strArray1 = File.ReadAllLines(path);
+      List<float[]> numArrayList = new List<float[]>();
+      List<float> floatList = new List<float>();
+      foreach (string str in strArray1)
+      {
+        string[] strArray2 = str.Split(" ");
+        if (strArray2[0] == "v")
+        {
+          float[] numArray = new float[3]
+          {
+            float.Parse(strArray2[1]),
+            float.Parse(strArray2[2]),
+            float.Parse(strArray2[3])
+          };
+          numArrayList.Add(numArray);
+        }
+        if (strArray2[0] == "f")
+        {
+          string[] strArray3 = strArray2[1].Split("//");
+          string[] strArray4 = strArray2[2].Split("//");
+          string[] strArray5 = strArray2[3].Split("//");
+          float[] numArray1 = numArrayList[int.Parse(strArray3[0]) - 1];
+          float[] numArray2 = numArrayList[int.Parse(strArray4[0]) - 1];
+          float[] numArray3 = numArrayList[int.Parse(strArray5[0]) - 1];
+          Vector3 vector3_1 = new Vector3(numArray1[0], numArray1[1], numArray1[2]);
+          Vector3 vector3_2 = new Vector3(numArray2[0], numArray2[1], numArray2[2]);
+          Vector3 vector3_3 = new Vector3(numArray3[0], numArray3[1], numArray3[2]);
+          Vector3 right = vector3_2 - vector3_1;
+          Vector3 vector3_4 = vector3_1;
+          Vector3 vector3_5 = Vector3.Cross(vector3_3 - vector3_4, right);
+          floatList.Add(numArray1[0]);
+          floatList.Add(numArray1[1]);
+          floatList.Add(numArray1[2]);
+          floatList.Add(vector3_5.X);
+          floatList.Add(vector3_5.Y);
+          floatList.Add(vector3_5.Z);
+          floatList.Add(numArray2[0]);
+          floatList.Add(numArray2[1]);
+          floatList.Add(numArray2[2]);
+          floatList.Add(vector3_5.X);
+          floatList.Add(vector3_5.Y);
+          floatList.Add(vector3_5.Z);
+          floatList.Add(numArray3[0]);
+          floatList.Add(numArray3[1]);
+          floatList.Add(numArray3[2]);
+          floatList.Add(vector3_5.X);
+          floatList.Add(vector3_5.Y);
+          floatList.Add(vector3_5.Z);
+        }
+      }
+      return floatList.ToArray();
+    }
 
-            return final.ToArray();
-        }
-        private static float[] loadObjTextured(string path)
-        {
-            string[] lines = System.IO.File.ReadAllLines(path);
-            List<float[]> vertices = new List<float[]>();
-            List<float[]> textureCords = new List<float[]>();
-            List<float> final = new List<float>();
-            foreach (string line in lines)
-            {
-                string[] lineSlitted = line.Split(" ");
-                if (lineSlitted[0] == "v")
-                {
-                    float[] toAdd = new float[3];
-                    toAdd[0] = (float.Parse(lineSlitted[1]));
-                    toAdd[1] = (float.Parse(lineSlitted[2]));
-                    toAdd[2] = (float.Parse(lineSlitted[3]));
-                    vertices.Add(toAdd);
-                }
-                if (lineSlitted[0] == "vt")
-                {
-                    float[] toAdd = new float[2];
-                    toAdd[0] = (float.Parse(lineSlitted[1]));
-                    toAdd[1] = (-(float.Parse(lineSlitted[2]) - 1));
-                    textureCords.Add(toAdd);
-                }
-                if (lineSlitted[0] == "f")
-                {
-                    string[] t1 = lineSlitted[1].Split("/");
-                    string[] t2 = lineSlitted[2].Split("/");
-                    string[] t3 = lineSlitted[3].Split("/");
-
-
-
-                    float[] v1 = vertices[int.Parse(t1[0]) - 1];
-                    if (int.Parse(t2[0]) - 1 >= 0 && vertices.Count > int.Parse(t2[0]) - 1)
-                    {
-                        float[] v2 = vertices[int.Parse(t2[0]) - 1];
-                        float[] v3 = vertices[int.Parse(t3[0]) - 1];
-                        float[] tex1 = textureCords[int.Parse(t1[1]) - 1];
-                        float[] tex2 = textureCords[int.Parse(t2[1]) - 1];
-                        float[] tex3 = textureCords[int.Parse(t3[1]) - 1];
-
-                        Vector3 v01 = new Vector3(v1[0], v1[1], v1[2]);
-                        Vector3 v02 = new Vector3(v2[0], v2[1], v2[2]);
-                        Vector3 v03 = new Vector3(v3[0], v3[1], v3[2]);
-
-                        Vector3 l1 = v02 - v01;
-                        Vector3 l2 = v03 - v01;
-
-                        Vector3 n = Vector3.Cross(l2, l1);
-
-                        final.Add(v1[0]); final.Add(v1[1]); final.Add(v1[2]); final.Add(n.X); final.Add(n.Y); final.Add(n.Z); final.Add(tex1[0]); final.Add(tex1[1]);
-                        final.Add(v2[0]); final.Add(v2[1]); final.Add(v2[2]); final.Add(n.X); final.Add(n.Y); final.Add(n.Z); final.Add(tex2[0]); final.Add(tex2[1]);
-                        final.Add(v3[0]); final.Add(v3[1]); final.Add(v3[2]); final.Add(n.X); final.Add(n.Y); final.Add(n.Z); final.Add(tex3[0]); final.Add(tex3[1]);
-                    }
-                }
-
-            }
-
-
-            return final.ToArray();
-        }
-        private class Object
-        {
-            private readonly int _vertexBufferObject;
-            private readonly int _mainObject;
-            private readonly float[] _vertices;
-            private float _rotX, _rotY, _rotZ;
-            private Vector3 _pos;
-            private readonly Vector3 _color;
-            private readonly Shader _shader;
-            private readonly Lamp _lamp;
-            private float _scale = 1.0f;
-            public Object(string path, Shader lightingShader, Lamp lamp, Vector3 col)
-            {
-                _vertices = loadObj(path);
-
-                _vertexBufferObject = GL.GenBuffer();
-                GL.BindBuffer(BufferTarget.ArrayBuffer, _vertexBufferObject);
-                GL.BufferData(BufferTarget.ArrayBuffer, _vertices.Length * sizeof(float), _vertices, BufferUsageHint.StaticDraw);
-
-                _mainObject = GL.GenVertexArray();
-                GL.BindVertexArray(_mainObject);
-
-                GL.BindBuffer(BufferTarget.ArrayBuffer, _vertexBufferObject);
-
-                var positionLocation = lightingShader.GetAttribLocation("aPos");
-                GL.EnableVertexAttribArray(positionLocation);
-                GL.VertexAttribPointer(positionLocation, 3, VertexAttribPointerType.Float, false, 6 * sizeof(float), 0);
-
-                var normalLocation = lightingShader.GetAttribLocation("aNormal");
-                GL.EnableVertexAttribArray(normalLocation);
-                GL.VertexAttribPointer(normalLocation, 3, VertexAttribPointerType.Float, false, 6 * sizeof(float), 3 * sizeof(float));
-                _rotX = 0.0f; _rotY = 0.0f; _rotZ = 0.0f;
-                _pos = new Vector3(0.0f, 0.0f, 0.0f);
-                _shader = lightingShader;
-                _lamp = lamp;
-                _color = col;
-            }
-            public Object(float[] vertices, Shader lightingShader, Lamp lamp, Vector3 col)
-            {
-                _vertices = vertices;
-
-                _vertexBufferObject = GL.GenBuffer();
-                GL.BindBuffer(BufferTarget.ArrayBuffer, _vertexBufferObject);
-                GL.BufferData(BufferTarget.ArrayBuffer, this._vertices.Length * sizeof(float), this._vertices, BufferUsageHint.StaticDraw);
-
-                _mainObject = GL.GenVertexArray();
-                GL.BindVertexArray(_mainObject);
-
-                GL.BindBuffer(BufferTarget.ArrayBuffer, _vertexBufferObject);
-
-                var positionLocation = lightingShader.GetAttribLocation("aPos");
-                GL.EnableVertexAttribArray(positionLocation);
-                GL.VertexAttribPointer(positionLocation, 3, VertexAttribPointerType.Float, false, 6 * sizeof(float), 0);
-
-                var normalLocation = lightingShader.GetAttribLocation("aNormal");
-                GL.EnableVertexAttribArray(normalLocation);
-                GL.VertexAttribPointer(normalLocation, 3, VertexAttribPointerType.Float, false, 6 * sizeof(float), 3 * sizeof(float));
-                _rotX = 0.0f; _rotY = 0.0f; _rotZ = 0.0f;
-                _pos = new Vector3(0.0f, 0.0f, 0.0f);
-                _shader = lightingShader;
-                _lamp = lamp;
-                _color = col;
-            }
-            public void show(Camera camera)
-            {
-                GL.BindVertexArray(_mainObject);
-
-                _shader.Use();
-
-
-                _shader.SetMatrix4("model",  (Matrix4.CreateScale(_scale) *  Matrix4.CreateRotationX(_rotX) * Matrix4.CreateRotationX(_rotY) * Matrix4.CreateRotationZ(_rotZ)) * Matrix4.CreateTranslation(_pos));
-                _shader.SetMatrix4("view", camera.GetViewMatrix());
-                _shader.SetMatrix4("projection", camera.GetProjectionMatrix());
-
-                _shader.SetVector3("objectColor", _color);
-                _shader.SetVector3("lightColor", _lamp.LightColor);
-                _shader.SetVector3("lightPos", _lamp.Pos);
-
-                GL.DrawArrays(PrimitiveType.Triangles, 0, _vertices.Length / 6);
-            }
-            public void setRotationX(float angle)
-            {
-                _rotX = angle;
-            }
-            public void setRotationY(float angle)
-            {
-                _rotY = angle;
-            }
-            public void setRotationZ(float angle)
-            {
-                _rotZ = angle;
-            }
-            public void setPositionInSpace(float x, float y, float z)
-            {
-                _pos = new Vector3(x, y, z);
-            }
-            public void setScale(float scale)
-            {
-                _scale = scale; 
-            }
-            public void Dispose()
-            {
-                GL.DeleteBuffer(_vertexBufferObject);
-                GL.DeleteVertexArray(_mainObject);
-            }
-        }
-        private class Lamp
-        {
-            private readonly int _vertexBufferObject;
-            private readonly int _mainObject;
-            public readonly Vector3 Pos;
-            public readonly Vector3 LightColor;
-            private readonly float[] _vertices;
-            public Lamp(Vector3 pos, Vector3 lightColor, Shader lampShader)
-            {
-                Pos = pos;
-                LightColor = lightColor;
-                _vertices = loadObj("Objs/sphere.obj");
-
-                _vertexBufferObject = GL.GenBuffer();
-                GL.BindBuffer(BufferTarget.ArrayBuffer, _vertexBufferObject);
-                GL.BufferData(BufferTarget.ArrayBuffer, _vertices.Length * sizeof(float), _vertices, BufferUsageHint.StaticDraw);
-
-                _mainObject = GL.GenVertexArray();
-                GL.BindVertexArray(_mainObject);
-
-                GL.BindBuffer(BufferTarget.ArrayBuffer, _vertexBufferObject);
-
-                var positionLocation = lampShader.GetAttribLocation("aPos");
-                GL.EnableVertexAttribArray(positionLocation);
-                GL.VertexAttribPointer(positionLocation, 3, VertexAttribPointerType.Float, false, 6 * sizeof(float), 0);
-
-                lampShader.SetVector3("lightColor", lightColor);
-            }
-            public void show(Camera camera, Shader lampShader)
-            {
-                GL.BindVertexArray(_mainObject);
-
-                lampShader.Use();
-
-                Matrix4 lampMatrix = Matrix4.Identity;
-                lampMatrix *= Matrix4.CreateScale(0.2f);
-                lampMatrix *= Matrix4.CreateTranslation(Pos);
-
-                lampShader.SetMatrix4("model", lampMatrix);
-                lampShader.SetMatrix4("view", camera.GetViewMatrix());
-                lampShader.SetMatrix4("projection", camera.GetProjectionMatrix());
-
-                GL.DrawArrays(PrimitiveType.Triangles, 0, _vertices.Length / 6);
-            }
-            public void Dispose()
-            {
-                GL.DeleteBuffer(_vertexBufferObject);
-                GL.DeleteVertexArray(_mainObject);
-            }
+    private static float[] loadObjTextured(string path)
+    {
+      string[] strArray1 = File.ReadAllLines(path);
+      List<float[]> numArrayList1 = new List<float[]>();
+      List<float[]> numArrayList2 = new List<float[]>();
+      List<float> floatList = new List<float>();
+      foreach (string str in strArray1)
+      {
+        string[] strArray2 = str.Split(" ");
+        if (strArray2[0] == "v")
+        {
+          float[] numArray = new float[3]
+          {
+            float.Parse(strArray2[1]),
+            float.Parse(strArray2[2]),
+            float.Parse(strArray2[3])
+          };
+          numArrayList1.Add(numArray);
         }
-        private class TexturedObject
+        if (strArray2[0] == "vt")
         {
-            private readonly int _vertexBufferObject;
-            private readonly int _mainObject;
-            private readonly float[] _vertices;
-            private float _rotX, _rotY, _rotZ;
-            private readonly Texture _texture;
-            private Vector3 _pos;
-            private readonly Shader _shader;
-            public TexturedObject(string path, Shader textureShader, string texturePath)
-            {
-                _vertices = loadObjTextured(path);
-
-                _vertexBufferObject = GL.GenBuffer();
-                GL.BindBuffer(BufferTarget.ArrayBuffer, _vertexBufferObject);
-                GL.BufferData(BufferTarget.ArrayBuffer, _vertices.Length * sizeof(float), _vertices, BufferUsageHint.StaticDraw);
-
-                _mainObject = GL.GenVertexArray();
-                GL.BindVertexArray(_mainObject);
-                
-                var positionLocation = textureShader.GetAttribLocation("aPos");
-                GL.EnableVertexAttribArray(positionLocation);
-                GL.VertexAttribPointer(positionLocation, 3, VertexAttribPointerType.Float, false, 8 * sizeof(float), 0);
-
-                var normalLocation = textureShader.GetAttribLocation("aNormal");
-                GL.EnableVertexAttribArray(normalLocation);
-                GL.VertexAttribPointer(normalLocation, 3, VertexAttribPointerType.Float, false, 8 * sizeof(float), 3 * sizeof(float));
-
-                var textureLocation = textureShader.GetAttribLocation("aTexture");
-                GL.EnableVertexAttribArray(textureLocation);
-                GL.VertexAttribPointer(textureLocation, 2, VertexAttribPointerType.Float, false, 8 * sizeof(float), 6 * sizeof(float));
-
-                _texture = new Texture(texturePath, TextureMinFilter.Nearest, TextureMagFilter.Nearest);
-                _texture.Use();
-
-                _rotX = 0.0f; _rotY = 0.0f; _rotZ = 0.0f;
-                _pos = new Vector3(0.0f, 0.0f, 0.0f);
-                _shader = textureShader;
-            }
-
-            public void show(Camera camera)
-            {
-                GL.BindVertexArray(_mainObject);
-
-                _texture.Use();
-                _shader.Use();
-
-
-                _shader.SetMatrix4("model", (Matrix4.CreateRotationX(_rotX) * Matrix4.CreateRotationX(_rotY) * Matrix4.CreateRotationZ(_rotZ)) * Matrix4.CreateTranslation(_pos));
-                _shader.SetMatrix4("view", camera.GetViewMatrix());
-                _shader.SetMatrix4("projection", camera.GetProjectionMatrix());
-
-                //textureShader.SetVector3("lightColor", lamp.lightColor);
-                //textureShader.SetVector3("lightPos", lamp.pos);
-                GL.DrawArrays(PrimitiveType.Triangles, 0, _vertices.Length / 8);
-            }
-            public void setRotationX(float angle)
-            {
-                _rotX = angle;
-            }
-            public void setRotationY(float angle)
-            {
-                _rotY = angle;
-            }
-            public void setRotationZ(float angle)
-            {
-                _rotZ = angle;
-            }
-            public void setPositionInSpace(float x, float y, float z)
-            {
-                _pos = new Vector3(x, y, z);
-            }
-            public void Dispose()
-            {
-                GL.DeleteBuffer(_vertexBufferObject);
-                GL.DeleteVertexArray(_mainObject);
-                GL.DeleteTexture(_texture.Handle);
-            }
+          float[] numArray = new float[2]
+          {
+            float.Parse(strArray2[1]),
+            (float) -((double) float.Parse(strArray2[2]) - 1.0)
+          };
+          numArrayList2.Add(numArray);
+        }
+        if (strArray2[0] == "f")
+        {
+          string[] strArray3 = strArray2[1].Split("/");
+          string[] strArray4 = strArray2[2].Split("/");
+          string[] strArray5 = strArray2[3].Split("/");
+          float[] numArray1 = numArrayList1[int.Parse(strArray3[0]) - 1];
+          if (int.Parse(strArray4[0]) - 1 >= 0 && numArrayList1.Count > int.Parse(strArray4[0]) - 1)
+          {
+            float[] numArray2 = numArrayList1[int.Parse(strArray4[0]) - 1];
+            float[] numArray3 = numArrayList1[int.Parse(strArray5[0]) - 1];
+            float[] numArray4 = numArrayList2[int.Parse(strArray3[1]) - 1];
+            float[] numArray5 = numArrayList2[int.Parse(strArray4[1]) - 1];
+            float[] numArray6 = numArrayList2[int.Parse(strArray5[1]) - 1];
+            Vector3 vector3_1 = new Vector3(numArray1[0], numArray1[1], numArray1[2]);
+            Vector3 vector3_2 = new Vector3(numArray2[0], numArray2[1], numArray2[2]);
+            Vector3 vector3_3 = new Vector3(numArray3[0], numArray3[1], numArray3[2]);
+            Vector3 right = vector3_2 - vector3_1;
+            Vector3 vector3_4 = vector3_1;
+            Vector3 vector3_5 = Vector3.Cross(vector3_3 - vector3_4, right);
+            floatList.Add(numArray1[0]);
+            floatList.Add(numArray1[1]);
+            floatList.Add(numArray1[2]);
+            floatList.Add(vector3_5.X);
+            floatList.Add(vector3_5.Y);
+            floatList.Add(vector3_5.Z);
+            floatList.Add(numArray4[0]);
+            floatList.Add(numArray4[1]);
+            floatList.Add(numArray2[0]);
+            floatList.Add(numArray2[1]);
+            floatList.Add(numArray2[2]);
+            floatList.Add(vector3_5.X);
+            floatList.Add(vector3_5.Y);
+            floatList.Add(vector3_5.Z);
+            floatList.Add(numArray5[0]);
+            floatList.Add(numArray5[1]);
+            floatList.Add(numArray3[0]);
+            floatList.Add(numArray3[1]);
+            floatList.Add(numArray3[2]);
+            floatList.Add(vector3_5.X);
+            floatList.Add(vector3_5.Y);
+            floatList.Add(vector3_5.Z);
+            floatList.Add(numArray6[0]);
+            floatList.Add(numArray6[1]);
+          }
+        }
+      }
+      return floatList.ToArray();
+    }
 
-        }
-        public int createCube(Vector3 color)
-        {
-            _mainObjects.Add(new Object("Objs/cube.obj", _lightingShader, _mainLamp, color));
-            return _mainObjects.Count - 1;
-        }
-        public int createSphere(Vector3 color)
-        {
-            _mainObjects.Add(new Object("Objs/sphere.obj", _lightingShader, _mainLamp, color));
-            return _mainObjects.Count - 1;
-        }
-        public int createTorus(Vector3 color)
-        {
-            _mainObjects.Add(new Object("Objs/torus.obj", _lightingShader, _mainLamp, color));
-            return _mainObjects.Count - 1;
-        }
-        public int createCylinder(Vector3 color)
-        {
-            _mainObjects.Add(new Object("Objs/cilinder.obj", _lightingShader, _mainLamp, color));
-            return _mainObjects.Count - 1;
-        }
-        public int createPlane(float x1, float y1, float z1,
-                               float x2, float y2, float z2,
-                               float x3, float y3, float z3,
-                               float x4, float y4, float z4, Vector3 color)
-        {
-            Vector3 l1 = new Vector3(x2 - x1, y2 - y1, z2 - z1);
-            Vector3 l2 = new Vector3(x3 - x1, y3 - y1, z3 - z1);
-            Vector3 normal = Vector3.Cross(l1, l2);
+    public int createCube(Vector3 color)
+    {
+      this._mainObjects.Add(new MainRenderWindow.Object("Objs/cube.obj", this._lightingShader, this._mainLamp, color));
+      return this._mainObjects.Count - 1;
+    }
+
+    public int createSphere(Vector3 color)
+    {
+      this._mainObjects.Add(new MainRenderWindow.Object("Objs/sphere.obj", this._lightingShader, this._mainLamp, color));
+      return this._mainObjects.Count - 1;
+    }
+
+    public int createTorus(Vector3 color)
+    {
+      this._mainObjects.Add(new MainRenderWindow.Object("Objs/torus.obj", this._lightingShader, this._mainLamp, color));
+      return this._mainObjects.Count - 1;
+    }
+
+    public int createCylinder(Vector3 color)
+    {
+      this._mainObjects.Add(new MainRenderWindow.Object("Objs/cilinder.obj", this._lightingShader, this._mainLamp, color));
+      return this._mainObjects.Count - 1;
+    }
 
-            float[] vertices =
-            {
-                x1, y1, z1, normal.X,  normal.Y, normal.Z,
-                x2, y2, z2, normal.X,  normal.Y, normal.Z,
-                x3, y3, z3, normal.X,  normal.Y, normal.Z,
-
-                x4, y4, z4, normal.X,  normal.Y, normal.Z,
-                x2, y2, z2, normal.X,  normal.Y, normal.Z,
-                x3, y3, z3, normal.X,  normal.Y, normal.Z,
-            };
-            _mainObjects.Add(new Object(vertices, _lightingShader, _mainLamp, color));
-            return _mainObjects.Count - 1;
-        }
-        public void openTexturedObj(string obj, string texture)
-        {
-            _mainTexturedObjects.Add(new TexturedObject(obj, _textureShader, texture));
-        }
-        public void openObj(string obj, Vector3 color)
-        {
-            _mainObjects.Add(new Object(obj, _lightingShader, _mainLamp, color));
-        }
-        public void createMainLight(Vector3 pos, Vector3 color)
-        {
-            _mainLamp = new Lamp(pos, color, _lampShader);
-        }
-        public void rotateObject(float x, float y, float z, int handle)
-        {
-            _mainObjects[handle].setRotationX(x);
-            _mainObjects[handle].setRotationY(y);
-            _mainObjects[handle].setRotationZ(z);
-        }
-        public void rotateTexturedObject(float x, float y, float z, int handle)
-        {
-            _mainTexturedObjects[handle].setRotationX(x);
-            _mainTexturedObjects[handle].setRotationY(y);
-            _mainTexturedObjects[handle].setRotationZ(z);
-        }
-        public void scaleObject(float scale, int handle)
-        {
-            _mainObjects[handle].setScale(scale);
-        }
-        public void translateObject(float x, float y, float z, int handle)
-        {
-            _mainObjects[handle].setPositionInSpace(x, y, z);
-        }
-        public void translateTexturedObject(float x, float y, float z, int handle)
-        {
-            _mainTexturedObjects[handle].setPositionInSpace(x, y, z);
-        }
-        
-        
-        protected void drawTexturedRectangle(float x1, float y1, float u1, float v1, float x2, float y2, float u2, float v2, string texturePath, Color4 color, TextureMinFilter min, TextureMagFilter mag)
-        {
-            Texture texture = new Texture(texturePath, min, mag);
-            float x1Trans = x1 - (Width / 2);
-            float y1Trans = y1 - (Height / 2);
-            float x1Norm = x1Trans / (Width / 2);
-            float y1Norm = y1Trans / (Height / 2);
-            float x2Trans = x2 - (Width / 2);
-            float y2Trans = y2 - (Height / 2);
-            float x2Norm = x2Trans / (Width / 2);
-            float y2Norm = y2Trans / (Height / 2);
-            
-            float[] vertices =
-            {
-                x1Norm, y1Norm, 0f, u1, v2,
-                x1Norm, y2Norm, 0f, u1, v1,
-                x2Norm, y2Norm, 0f, u2, v1,
-                
-                x1Norm, y1Norm, 0f, u1, v2,
-                x2Norm, y1Norm, 0f, u2, v2,
-                x2Norm, y2Norm, 0f, u2, v1
-            };
-            
-            var vertexBufferObject = GL.GenBuffer();
-            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);
-            GL.BufferData(BufferTarget.ArrayBuffer, vertices.Length * sizeof(float), vertices, BufferUsageHint.DynamicDraw);
-            
-            texture.Use();
-            _2dTextured.Use();
-            
-            var mainObject = GL.GenVertexArray();
-            GL.BindVertexArray(mainObject);
-            
-            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);
-
-            var positionLocation = _2dTextured.GetAttribLocation("aPosition");
-            GL.EnableVertexAttribArray(positionLocation);
-            GL.VertexAttribPointer(positionLocation, 3, VertexAttribPointerType.Float, false, 5 * sizeof(float), 0);
-
-            var texCoordLocation = _2dTextured.GetAttribLocation("aTexCoord");
-            GL.EnableVertexAttribArray(texCoordLocation);
-            GL.VertexAttribPointer(texCoordLocation, 2, VertexAttribPointerType.Float, false, 5 * sizeof(float), 3 * sizeof(float));
-            
-            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);
-            
-            GL.BindVertexArray(mainObject);
-            
-            texture.Use();
-            _2dTextured.Use();
-            
-            _2dTextured.SetVector4("lightColor", new Vector4(color.R, color.G, color.B, color.A));
-
-            GL.DrawArrays(PrimitiveType.Triangles, 0, 6);
-            
-            GL.DeleteBuffer(vertexBufferObject);
-            GL.DeleteTexture(texture.Handle);
-            GL.DeleteVertexArray(mainObject);
-
-        }
-        protected void drawTexturedRectangle(float x1, float y1, float u1, float v1, float x2, float y2, float u2, float v2, Bitmap textureBitmap, Color4 color, TextureMinFilter min, TextureMagFilter mag)
-        {
-            Texture texture = new Texture(textureBitmap, min, mag);
-            float x1Trans = x1 - (Width / 2);
-            float y1Trans = y1 - (Height / 2);
-            float x1Norm = x1Trans / (Width / 2);
-            float y1Norm = y1Trans / (Height / 2);
-            float x2Trans = x2 - (Width / 2);
-            float y2Trans = y2 - (Height / 2);
-            float x2Norm = x2Trans / (Width / 2);
-            float y2Norm = y2Trans / (Height / 2);
-
-            float[] vertices =
-            {
-                x1Norm, y1Norm, 0f, u1, v2,
-                x1Norm, y2Norm, 0f, u1, v1,
-                x2Norm, y2Norm, 0f, u2, v1,
-
-                x1Norm, y1Norm, 0f, u1, v2,
-                x2Norm, y1Norm, 0f, u2, v2,
-                x2Norm, y2Norm, 0f, u2, v1
-            };
-
-            var vertexBufferObject = GL.GenBuffer();
-            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);
-            GL.BufferData(BufferTarget.ArrayBuffer, vertices.Length * sizeof(float), vertices, BufferUsageHint.DynamicDraw);
-
-            texture.Use();
-            _2dTextured.Use();
-
-            var mainObject = GL.GenVertexArray();
-            GL.BindVertexArray(mainObject);
-
-            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);
-
-            var positionLocation = _2dTextured.GetAttribLocation("aPosition");
-            GL.EnableVertexAttribArray(positionLocation);
-            GL.VertexAttribPointer(positionLocation, 3, VertexAttribPointerType.Float, false, 5 * sizeof(float), 0);
-
-            var texCoordLocation = _2dTextured.GetAttribLocation("aTexCoord");
-            GL.EnableVertexAttribArray(texCoordLocation);
-            GL.VertexAttribPointer(texCoordLocation, 2, VertexAttribPointerType.Float, false, 5 * sizeof(float), 3 * sizeof(float));
-
-            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);
-
-            GL.BindVertexArray(mainObject);
-
-            texture.Use();
-            _2dTextured.Use();
-
-            _2dTextured.SetVector4("lightColor", new Vector4(color.R, color.G, color.B, color.A));
-
-            GL.DrawArrays(PrimitiveType.Triangles, 0, 6);
-
-            GL.DeleteBuffer(vertexBufferObject);
-            GL.DeleteTexture(texture.Handle);
-            GL.DeleteVertexArray(mainObject);
-
-        }
-        protected void drawTexturedRectangle(float x1, float y1, float u1, float v1, float x2, float y2, float u2, float v2, Texture texture, Color4 color)
-        {
-            float x1Trans = x1 - (Width / 2);
-            float y1Trans = y1 - (Height / 2);
-            float x1Norm = x1Trans / (Width / 2);
-            float y1Norm = y1Trans / (Height / 2);
-            float x2Trans = x2 - (Width / 2);
-            float y2Trans = y2 - (Height / 2);
-            float x2Norm = x2Trans / (Width / 2);
-            float y2Norm = y2Trans / (Height / 2);
+    public int createPlane(
+      float x1,
+      float y1,
+      float z1,
+      float x2,
+      float y2,
+      float z2,
+      float x3,
+      float y3,
+      float z3,
+      float x4,
+      float y4,
+      float z4,
+      Vector3 color)
+    {
+      Vector3 vector3 = Vector3.Cross(new Vector3(x2 - x1, y2 - y1, z2 - z1), new Vector3(x3 - x1, y3 - y1, z3 - z1));
+      this._mainObjects.Add(new MainRenderWindow.Object(new float[36]
+      {
+        x1,
+        y1,
+        z1,
+        vector3.X,
+        vector3.Y,
+        vector3.Z,
+        x2,
+        y2,
+        z2,
+        vector3.X,
+        vector3.Y,
+        vector3.Z,
+        x3,
+        y3,
+        z3,
+        vector3.X,
+        vector3.Y,
+        vector3.Z,
+        x4,
+        y4,
+        z4,
+        vector3.X,
+        vector3.Y,
+        vector3.Z,
+        x2,
+        y2,
+        z2,
+        vector3.X,
+        vector3.Y,
+        vector3.Z,
+        x3,
+        y3,
+        z3,
+        vector3.X,
+        vector3.Y,
+        vector3.Z
+      }, this._lightingShader, this._mainLamp, color));
+      return this._mainObjects.Count - 1;
+    }
+
+    public void openTexturedObj(string obj, string texture) => this._mainTexturedObjects.Add(new MainRenderWindow.TexturedObject(obj, this._textureShader, texture));
+
+    public void openObj(string obj, Vector3 color) => this._mainObjects.Add(new MainRenderWindow.Object(obj, this._lightingShader, this._mainLamp, color));
+
+    public void createMainLight(Vector3 pos, Vector3 color) => this._mainLamp = new MainRenderWindow.Lamp(pos, color, this._lampShader);
+
+    public void rotateObject(float x, float y, float z, int handle)
+    {
+      this._mainObjects[handle].setRotationX(x);
+      this._mainObjects[handle].setRotationY(y);
+      this._mainObjects[handle].setRotationZ(z);
+    }
+
+    public void rotateTexturedObject(float x, float y, float z, int handle)
+    {
+      this._mainTexturedObjects[handle].setRotationX(x);
+      this._mainTexturedObjects[handle].setRotationY(y);
+      this._mainTexturedObjects[handle].setRotationZ(z);
+    }
+
+    public void scaleObject(float scale, int handle) => this._mainObjects[handle].setScale(scale);
+
+    public void translateObject(float x, float y, float z, int handle) => this._mainObjects[handle].setPositionInSpace(x, y, z);
+
+    public void translateTexturedObject(float x, float y, float z, int handle) => this._mainTexturedObjects[handle].setPositionInSpace(x, y, z);
+
+    protected void drawTexturedRectangle(
+      float x1,
+      float y1,
+      float u1,
+      float v1,
+      float x2,
+      float y2,
+      float u2,
+      float v2,
+      string texturePath,
+      Color4 color,
+      TextureMinFilter min,
+      TextureMagFilter mag)
+    {
+      Texture texture = new Texture(texturePath, min, mag);
+      double num1 = (double) x1 - (double) (this.Width / 2);
+      float num2 = y1 - (float) (this.Height / 2);
+      double num3 = (double) (this.Width / 2);
+      float num4 = (float) (num1 / num3);
+      float num5 = num2 / (float) (this.Height / 2);
+      double num6 = (double) x2 - (double) (this.Width / 2);
+      float num7 = y2 - (float) (this.Height / 2);
+      double num8 = (double) (this.Width / 2);
+      float num9 = (float) (num6 / num8);
+      float num10 = num7 / (float) (this.Height / 2);
+      float[] data = new float[30]
+      {
+        num4,
+        num5,
+        0.0f,
+        u1,
+        v2,
+        num4,
+        num10,
+        0.0f,
+        u1,
+        v1,
+        num9,
+        num10,
+        0.0f,
+        u2,
+        v1,
+        num4,
+        num5,
+        0.0f,
+        u1,
+        v2,
+        num9,
+        num5,
+        0.0f,
+        u2,
+        v2,
+        num9,
+        num10,
+        0.0f,
+        u2,
+        v1
+      };
+      int num11 = GL.GenBuffer();
+      GL.BindBuffer(BufferTarget.ArrayBuffer, num11);
+      GL.BufferData<float>(BufferTarget.ArrayBuffer, data.Length * 4, data, BufferUsageHint.DynamicDraw);
+      texture.Use();
+      this._2dTextured.Use();
+      int num12 = GL.GenVertexArray();
+      GL.BindVertexArray(num12);
+      GL.BindBuffer(BufferTarget.ArrayBuffer, num11);
+      int attribLocation1 = this._2dTextured.GetAttribLocation("aPosition");
+      GL.EnableVertexAttribArray(attribLocation1);
+      GL.VertexAttribPointer(attribLocation1, 3, VertexAttribPointerType.Float, false, 20, 0);
+      int attribLocation2 = this._2dTextured.GetAttribLocation("aTexCoord");
+      GL.EnableVertexAttribArray(attribLocation2);
+      GL.VertexAttribPointer(attribLocation2, 2, VertexAttribPointerType.Float, false, 20, 12);
+      GL.BindBuffer(BufferTarget.ArrayBuffer, num11);
+      GL.BindVertexArray(num12);
+      texture.Use();
+      this._2dTextured.Use();
+      this._2dTextured.SetVector4("lightColor", new Vector4(color.R, color.G, color.B, color.A));
+      GL.DrawArrays(PrimitiveType.Triangles, 0, 6);
+      GL.DeleteBuffer(num11);
+      GL.DeleteTexture(texture.Handle);
+      GL.DeleteVertexArray(num12);
+    }
+
+    protected void drawTexturedRectangle(
+      float x1,
+      float y1,
+      float u1,
+      float v1,
+      float x2,
+      float y2,
+      float u2,
+      float v2,
+      Bitmap textureBitmap,
+      Color4 color,
+      TextureMinFilter min,
+      TextureMagFilter mag)
+    {
+      Texture texture = new Texture(textureBitmap, min, mag);
+      double num1 = (double) x1 - (double) (this.Width / 2);
+      float num2 = y1 - (float) (this.Height / 2);
+      double num3 = (double) (this.Width / 2);
+      float num4 = (float) (num1 / num3);
+      float num5 = num2 / (float) (this.Height / 2);
+      double num6 = (double) x2 - (double) (this.Width / 2);
+      float num7 = y2 - (float) (this.Height / 2);
+      double num8 = (double) (this.Width / 2);
+      float num9 = (float) (num6 / num8);
+      float num10 = num7 / (float) (this.Height / 2);
+      float[] data = new float[30]
+      {
+        num4,
+        num5,
+        0.0f,
+        u1,
+        v2,
+        num4,
+        num10,
+        0.0f,
+        u1,
+        v1,
+        num9,
+        num10,
+        0.0f,
+        u2,
+        v1,
+        num4,
+        num5,
+        0.0f,
+        u1,
+        v2,
+        num9,
+        num5,
+        0.0f,
+        u2,
+        v2,
+        num9,
+        num10,
+        0.0f,
+        u2,
+        v1
+      };
+      int num11 = GL.GenBuffer();
+      GL.BindBuffer(BufferTarget.ArrayBuffer, num11);
+      GL.BufferData<float>(BufferTarget.ArrayBuffer, data.Length * 4, data, BufferUsageHint.DynamicDraw);
+      texture.Use();
+      this._2dTextured.Use();
+      int num12 = GL.GenVertexArray();
+      GL.BindVertexArray(num12);
+      GL.BindBuffer(BufferTarget.ArrayBuffer, num11);
+      int attribLocation1 = this._2dTextured.GetAttribLocation("aPosition");
+      GL.EnableVertexAttribArray(attribLocation1);
+      GL.VertexAttribPointer(attribLocation1, 3, VertexAttribPointerType.Float, false, 20, 0);
+      int attribLocation2 = this._2dTextured.GetAttribLocation("aTexCoord");
+      GL.EnableVertexAttribArray(attribLocation2);
+      GL.VertexAttribPointer(attribLocation2, 2, VertexAttribPointerType.Float, false, 20, 12);
+      GL.BindBuffer(BufferTarget.ArrayBuffer, num11);
+      GL.BindVertexArray(num12);
+      texture.Use();
+      this._2dTextured.Use();
+      this._2dTextured.SetVector4("lightColor", new Vector4(color.R, color.G, color.B, color.A));
+      GL.DrawArrays(PrimitiveType.Triangles, 0, 6);
+      GL.DeleteBuffer(num11);
+      GL.DeleteTexture(texture.Handle);
+      GL.DeleteVertexArray(num12);
+    }
 
-            float[] vertices =
-            {
-                x1Norm, y1Norm, 0f, u1, v2,
-                x1Norm, y2Norm, 0f, u1, v1,
-                x2Norm, y2Norm, 0f, u2, v1,
-
-                x1Norm, y1Norm, 0f, u1, v2,
-                x2Norm, y1Norm, 0f, u2, v2,
-                x2Norm, y2Norm, 0f, u2, v1
-            };
-
-            var vertexBufferObject = GL.GenBuffer();
-            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);
-            GL.BufferData(BufferTarget.ArrayBuffer, vertices.Length * sizeof(float), vertices, BufferUsageHint.DynamicDraw);
-
-            texture.Use();
-            _2dTextured.Use();
-
-            var mainObject = GL.GenVertexArray();
-            GL.BindVertexArray(mainObject);
-
-            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);
-
-            var positionLocation = _2dTextured.GetAttribLocation("aPosition");
-            GL.EnableVertexAttribArray(positionLocation);
-            GL.VertexAttribPointer(positionLocation, 3, VertexAttribPointerType.Float, false, 5 * sizeof(float), 0);
-
-            var texCoordLocation = _2dTextured.GetAttribLocation("aTexCoord");
-            GL.EnableVertexAttribArray(texCoordLocation);
-            GL.VertexAttribPointer(texCoordLocation, 2, VertexAttribPointerType.Float, false, 5 * sizeof(float), 3 * sizeof(float));
-
-            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);
-
-            GL.BindVertexArray(mainObject);
-
-            texture.Use();
-            _2dTextured.Use();
-
-            _2dTextured.SetVector4("lightColor", new Vector4(color.R, color.G, color.B, color.A));
-
-            GL.DrawArrays(PrimitiveType.Triangles, 0, 6);
-
-            GL.DeleteBuffer(vertexBufferObject);
-            GL.DeleteVertexArray(mainObject);
-
-        }
+    protected void drawTexturedRectangle(
+      float x1,
+      float y1,
+      float u1,
+      float v1,
+      float x2,
+      float y2,
+      float u2,
+      float v2,
+      Texture texture,
+      Color4 color)
+    {
+      double num1 = (double) x1 - (double) (this.Width / 2);
+      float num2 = y1 - (float) (this.Height / 2);
+      double num3 = (double) (this.Width / 2);
+      float num4 = (float) (num1 / num3);
+      float num5 = num2 / (float) (this.Height / 2);
+      double num6 = (double) x2 - (double) (this.Width / 2);
+      float num7 = y2 - (float) (this.Height / 2);
+      double num8 = (double) (this.Width / 2);
+      float num9 = (float) (num6 / num8);
+      float num10 = num7 / (float) (this.Height / 2);
+      float[] data = new float[30]
+      {
+        num4,
+        num5,
+        0.0f,
+        u1,
+        v2,
+        num4,
+        num10,
+        0.0f,
+        u1,
+        v1,
+        num9,
+        num10,
+        0.0f,
+        u2,
+        v1,
+        num4,
+        num5,
+        0.0f,
+        u1,
+        v2,
+        num9,
+        num5,
+        0.0f,
+        u2,
+        v2,
+        num9,
+        num10,
+        0.0f,
+        u2,
+        v1
+      };
+      int num11 = GL.GenBuffer();
+      GL.BindBuffer(BufferTarget.ArrayBuffer, num11);
+      GL.BufferData<float>(BufferTarget.ArrayBuffer, data.Length * 4, data, BufferUsageHint.DynamicDraw);
+      texture.Use();
+      this._2dTextured.Use();
+      int num12 = GL.GenVertexArray();
+      GL.BindVertexArray(num12);
+      GL.BindBuffer(BufferTarget.ArrayBuffer, num11);
+      int attribLocation1 = this._2dTextured.GetAttribLocation("aPosition");
+      GL.EnableVertexAttribArray(attribLocation1);
+      GL.VertexAttribPointer(attribLocation1, 3, VertexAttribPointerType.Float, false, 20, 0);
+      int attribLocation2 = this._2dTextured.GetAttribLocation("aTexCoord");
+      GL.EnableVertexAttribArray(attribLocation2);
+      GL.VertexAttribPointer(attribLocation2, 2, VertexAttribPointerType.Float, false, 20, 12);
+      GL.BindBuffer(BufferTarget.ArrayBuffer, num11);
+      GL.BindVertexArray(num12);
+      texture.Use();
+      this._2dTextured.Use();
+      this._2dTextured.SetVector4("lightColor", new Vector4(color.R, color.G, color.B, color.A));
+      GL.DrawArrays(PrimitiveType.Triangles, 0, 6);
+      GL.DeleteBuffer(num11);
+      GL.DeleteVertexArray(num12);
+    }
 
-        protected void drawLine(float x1, float y1, float x2, float y2, Color4 color)
-        {
-            float x1Trans = x1 - (Width / 2);
-            float y1Trans = y1 - (Height / 2);
-            float x1Norm = x1Trans / (Width / 2);
-            float y1Norm = y1Trans / (Height / 2);
-            float x2Trans = x2 - (Width / 2);
-            float y2Trans = y2 - (Height / 2);
-            float x2Norm = x2Trans / (Width / 2);
-            float y2Norm = y2Trans / (Height / 2);
-            float[] vertices =
-            {
-                x1Norm, y1Norm, 0f,
-                
-                x2Norm, y2Norm, 0f
-            };
-
-            var vertexBufferObject = GL.GenBuffer();
-            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);
-            GL.BufferData(BufferTarget.ArrayBuffer, vertices.Length * sizeof(float), vertices, BufferUsageHint.DynamicDraw);
-
-            _2dShader.Use();
-            
-            var mainObject = GL.GenVertexArray();
-            GL.BindVertexArray(mainObject);
-
-            var positionLocation = _2dShader.GetAttribLocation("aPos");
-            GL.EnableVertexAttribArray(positionLocation);
-            GL.VertexAttribPointer(positionLocation, 3, VertexAttribPointerType.Float, false, 3 * sizeof(float), 0);
-
-            
-            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);
-
-            GL.BindVertexArray(mainObject);
-            
-            _2dShader.SetVector4("lightColor", new Vector4(color.R, color.G, color.B, color.A));
-            
-            _2dShader.Use();
-            GL.DrawArrays(PrimitiveType.Lines, 0, 2);
-            
-            GL.DeleteBuffer(vertexBufferObject);
-            GL.DeleteVertexArray(mainObject);
-        }
-        protected void drawRectangle(float x1, float y1, float x2, float y2, Color4 color)
-        {
-            float x1Trans = x1 - (Width / 2);
-            float y1Trans = y1 - (Height / 2);
-            float x1Norm = x1Trans / (Width / 2);
-            float y1Norm = y1Trans / (Height / 2);
-            float x2Trans = x2 - (Width / 2);
-            float y2Trans = y2 - (Height / 2);
-            float x2Norm = x2Trans / (Width / 2);
-            float y2Norm = y2Trans / (Height / 2);
-            float[] vertices =
-            {
-                x1Norm, y1Norm, 0f,
-                x2Norm, y1Norm, 0f,
-                x1Norm, y2Norm, 0f,
-                
-                x2Norm, y1Norm, 0f,
-                x2Norm, y2Norm, 0f,
-                x1Norm, y2Norm, 0f
-            };
-
-            var vertexBufferObject = GL.GenBuffer();
-            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);
-            GL.BufferData(BufferTarget.ArrayBuffer, vertices.Length * sizeof(float), vertices, BufferUsageHint.DynamicDraw);
-
-            _2dShader.Use();
-            
-            var mainObject = GL.GenVertexArray();
-            GL.BindVertexArray(mainObject);
-
-            var positionLocation = _2dShader.GetAttribLocation("aPos");
-            GL.EnableVertexAttribArray(positionLocation);
-            GL.VertexAttribPointer(positionLocation, 3, VertexAttribPointerType.Float, false, 3 * sizeof(float), 0);
-
-            
-            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);
-
-            GL.BindVertexArray(mainObject);
-            
-            _2dShader.SetVector4("lightColor", new Vector4(color.R, color.G, color.B, color.A));
-            
-            _2dShader.Use();
-            GL.DrawArrays(PrimitiveType.Triangles, 0, 6);
-            
-            GL.DeleteBuffer(vertexBufferObject);
-            GL.DeleteVertexArray(mainObject);
+    protected void drawLine(float x1, float y1, float x2, float y2, Color4 color)
+    {
+      double num1 = (double) x1 - (double) (this.Width / 2);
+      float num2 = y1 - (float) (this.Height / 2);
+      double num3 = (double) (this.Width / 2);
+      float num4 = (float) (num1 / num3);
+      float num5 = num2 / (float) (this.Height / 2);
+      double num6 = (double) x2 - (double) (this.Width / 2);
+      float num7 = y2 - (float) (this.Height / 2);
+      double num8 = (double) (this.Width / 2);
+      float num9 = (float) (num6 / num8);
+      float num10 = num7 / (float) (this.Height / 2);
+      float[] data = new float[6]
+      {
+        num4,
+        num5,
+        0.0f,
+        num9,
+        num10,
+        0.0f
+      };
+      int num11 = GL.GenBuffer();
+      GL.BindBuffer(BufferTarget.ArrayBuffer, num11);
+      GL.BufferData<float>(BufferTarget.ArrayBuffer, data.Length * 4, data, BufferUsageHint.DynamicDraw);
+      this._2dShader.Use();
+      int num12 = GL.GenVertexArray();
+      GL.BindVertexArray(num12);
+      int attribLocation = this._2dShader.GetAttribLocation("aPos");
+      GL.EnableVertexAttribArray(attribLocation);
+      GL.VertexAttribPointer(attribLocation, 3, VertexAttribPointerType.Float, false, 12, 0);
+      GL.BindBuffer(BufferTarget.ArrayBuffer, num11);
+      GL.BindVertexArray(num12);
+      this._2dShader.SetVector4("lightColor", new Vector4(color.R, color.G, color.B, color.A));
+      this._2dShader.Use();
+      GL.DrawArrays(PrimitiveType.Lines, 0, 2);
+      GL.DeleteBuffer(num11);
+      GL.DeleteVertexArray(num12);
+    }
+
+    protected void drawRectangle(float x1, float y1, float x2, float y2, Color4 color)
+    {
+      double num1 = (double) x1 - (double) (this.Width / 2);
+      float num2 = y1 - (float) (this.Height / 2);
+      double num3 = (double) (this.Width / 2);
+      float num4 = (float) (num1 / num3);
+      float num5 = num2 / (float) (this.Height / 2);
+      double num6 = (double) x2 - (double) (this.Width / 2);
+      float num7 = y2 - (float) (this.Height / 2);
+      double num8 = (double) (this.Width / 2);
+      float num9 = (float) (num6 / num8);
+      float num10 = num7 / (float) (this.Height / 2);
+      float[] data = new float[18]
+      {
+        num4,
+        num5,
+        0.0f,
+        num9,
+        num5,
+        0.0f,
+        num4,
+        num10,
+        0.0f,
+        num9,
+        num5,
+        0.0f,
+        num9,
+        num10,
+        0.0f,
+        num4,
+        num10,
+        0.0f
+      };
+      int num11 = GL.GenBuffer();
+      GL.BindBuffer(BufferTarget.ArrayBuffer, num11);
+      GL.BufferData<float>(BufferTarget.ArrayBuffer, data.Length * 4, data, BufferUsageHint.DynamicDraw);
+      this._2dShader.Use();
+      int num12 = GL.GenVertexArray();
+      GL.BindVertexArray(num12);
+      int attribLocation = this._2dShader.GetAttribLocation("aPos");
+      GL.EnableVertexAttribArray(attribLocation);
+      GL.VertexAttribPointer(attribLocation, 3, VertexAttribPointerType.Float, false, 12, 0);
+      GL.BindBuffer(BufferTarget.ArrayBuffer, num11);
+      GL.BindVertexArray(num12);
+      this._2dShader.SetVector4("lightColor", new Vector4(color.R, color.G, color.B, color.A));
+      this._2dShader.Use();
+      GL.DrawArrays(PrimitiveType.Triangles, 0, 6);
+      GL.DeleteBuffer(num11);
+      GL.DeleteVertexArray(num12);
+    }
 
-        }
-        protected void drawTexturedLine(float x1, float y1, float u1, float v1, float x2, float y2, float u2, float v2, Texture texture, Color4 color)
-        {
-            float x1Trans = x1 - (Width / 2);
-            float y1Trans = y1 - (Height / 2);
-            float x1Norm = x1Trans / (Width / 2);
-            float y1Norm = y1Trans / (Height / 2);
-            float x2Trans = x2 - (Width / 2);
-            float y2Trans = y2 - (Height / 2);
-            float x2Norm = x2Trans / (Width / 2);
-            float y2Norm = y2Trans / (Height / 2);
-            float[] vertices =
-            {
-                x1Norm, y1Norm, 0f, u1, v1,
-                
-                x2Norm, y2Norm, 0f, u2, v2
-            };
-            
-            var vertexBufferObject = GL.GenBuffer();
-            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);
-            GL.BufferData(BufferTarget.ArrayBuffer, vertices.Length * sizeof(float), vertices, BufferUsageHint.DynamicDraw);
-            
-            texture.Use();
-            _2dTextured.Use();
-            
-            var mainObject = GL.GenVertexArray();
-            GL.BindVertexArray(mainObject);
-            
-            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);
-
-            var positionLocation = _2dTextured.GetAttribLocation("aPosition");
-            GL.EnableVertexAttribArray(positionLocation);
-            GL.VertexAttribPointer(positionLocation, 3, VertexAttribPointerType.Float, false, 5 * sizeof(float), 0);
-
-            var texCoordLocation = _2dTextured.GetAttribLocation("aTexCoord");
-            GL.EnableVertexAttribArray(texCoordLocation);
-            GL.VertexAttribPointer(texCoordLocation, 2, VertexAttribPointerType.Float, false, 5 * sizeof(float), 3 * sizeof(float));
-            
-            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);
-            
-            GL.BindVertexArray(mainObject);
-            
-            texture.Use();
-            _2dTextured.Use();
-            
-            _2dTextured.SetVector4("lightColor", new Vector4(color.R, color.G, color.B, color.A));
-            
-            GL.DrawArrays(PrimitiveType.Lines, 0, 2);
-            
-            GL.DeleteBuffer(vertexBufferObject);
-            GL.DeleteVertexArray(mainObject);
-        }
-        
-        protected void drawTexturedQuad(float x1, float y1, float z1, float u1, float v1, 
-                                      float x2, float y2, float z2, float u2, float v2, 
-                                      float x3, float y3, float z3, float u3, float v3,
-                                      float x4, float y4, float z4, float u4, float v4, string texturePath, Color4 color, TextureMinFilter min, TextureMagFilter mag)
-        {
-            Texture texture = new Texture(texturePath, min, mag);
-            float x1Trans = x1 - (Width / 2);
-            float y1Trans = y1 - (Height / 2);
-            float x1Norm = x1Trans / (Width / 2);
-            float y1Norm = y1Trans / (Height / 2);
-            float x2Trans = x2 - (Width / 2);
-            float y2Trans = y2 - (Height / 2);
-            float x2Norm = x2Trans / (Width / 2);
-            float y2Norm = y2Trans / (Height / 2);
-            float x3Trans = x3 - (Width / 2);
-            float y3Trans = y3 - (Height / 2);
-            float x3Norm = x3Trans / (Width / 2);
-            float y3Norm = y3Trans / (Height / 2);
-            float x4Trans = x4 - (Width / 2);
-            float y4Trans = y4 - (Height / 2);
-            float x4Norm = x4Trans / (Width / 2);
-            float y4Norm = y4Trans / (Height / 2);
-
-            float[] vertices =
-            {
-                x1Norm, y1Norm, z1, u1, -(v1 - 1),
-                x2Norm, y2Norm, z2, u2, -(v2 - 1),
-                x3Norm, y3Norm, z3, u3, -(v3 - 1),
-
-                x1Norm, y1Norm, z2, u1, -(v1 - 1),
-                x3Norm, y3Norm, z3, u3, -(v3 - 1),
-                x4Norm, y4Norm, z4, u4, -(v4 - 1)
-            };
-
-            var vertexBufferObject = GL.GenBuffer();
-            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);
-            GL.BufferData(BufferTarget.ArrayBuffer, vertices.Length * sizeof(float), vertices, BufferUsageHint.DynamicDraw);
-            
-            texture.Use();
-            _2dTextured.Use();
-            
-            var mainObject = GL.GenVertexArray();
-            GL.BindVertexArray(mainObject);
-            
-            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);
-
-            var positionLocation = _2dTextured.GetAttribLocation("aPosition");
-            GL.EnableVertexAttribArray(positionLocation);
-            GL.VertexAttribPointer(positionLocation, 3, VertexAttribPointerType.Float, false, 5 * sizeof(float), 0);
-
-            var texCoordLocation = _2dTextured.GetAttribLocation("aTexCoord");
-            GL.EnableVertexAttribArray(texCoordLocation);
-            GL.VertexAttribPointer(texCoordLocation, 2, VertexAttribPointerType.Float, false, 5 * sizeof(float), 3 * sizeof(float));
-            
-            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);
-            
-            GL.BindVertexArray(mainObject);
-            
-            texture.Use();
-            _2dTextured.Use();
-            
-            _2dTextured.SetVector4("lightColor", new Vector4(color.R, color.G, color.B, color.A));
-
-            GL.DrawArrays(PrimitiveType.Triangles, 0, 6);
-            
-            GL.DeleteBuffer(vertexBufferObject);
-            GL.DeleteTexture(texture.Handle);
-            GL.DeleteVertexArray(mainObject);
-
-        }
+    protected void drawTexturedLine(
+      float x1,
+      float y1,
+      float u1,
+      float v1,
+      float x2,
+      float y2,
+      float u2,
+      float v2,
+      Texture texture,
+      Color4 color)
+    {
+      double num1 = (double) x1 - (double) (this.Width / 2);
+      float num2 = y1 - (float) (this.Height / 2);
+      double num3 = (double) (this.Width / 2);
+      float num4 = (float) (num1 / num3);
+      float num5 = num2 / (float) (this.Height / 2);
+      double num6 = (double) x2 - (double) (this.Width / 2);
+      float num7 = y2 - (float) (this.Height / 2);
+      double num8 = (double) (this.Width / 2);
+      float num9 = (float) (num6 / num8);
+      float num10 = num7 / (float) (this.Height / 2);
+      float[] data = new float[10]
+      {
+        num4,
+        num5,
+        0.0f,
+        u1,
+        v1,
+        num9,
+        num10,
+        0.0f,
+        u2,
+        v2
+      };
+      int num11 = GL.GenBuffer();
+      GL.BindBuffer(BufferTarget.ArrayBuffer, num11);
+      GL.BufferData<float>(BufferTarget.ArrayBuffer, data.Length * 4, data, BufferUsageHint.DynamicDraw);
+      texture.Use();
+      this._2dTextured.Use();
+      int num12 = GL.GenVertexArray();
+      GL.BindVertexArray(num12);
+      GL.BindBuffer(BufferTarget.ArrayBuffer, num11);
+      int attribLocation1 = this._2dTextured.GetAttribLocation("aPosition");
+      GL.EnableVertexAttribArray(attribLocation1);
+      GL.VertexAttribPointer(attribLocation1, 3, VertexAttribPointerType.Float, false, 20, 0);
+      int attribLocation2 = this._2dTextured.GetAttribLocation("aTexCoord");
+      GL.EnableVertexAttribArray(attribLocation2);
+      GL.VertexAttribPointer(attribLocation2, 2, VertexAttribPointerType.Float, false, 20, 12);
+      GL.BindBuffer(BufferTarget.ArrayBuffer, num11);
+      GL.BindVertexArray(num12);
+      texture.Use();
+      this._2dTextured.Use();
+      this._2dTextured.SetVector4("lightColor", new Vector4(color.R, color.G, color.B, color.A));
+      GL.DrawArrays(PrimitiveType.Lines, 0, 2);
+      GL.DeleteBuffer(num11);
+      GL.DeleteVertexArray(num12);
+    }
+
+    protected void drawTexturedQuad(
+      float x1,
+      float y1,
+      float z1,
+      float u1,
+      float v1,
+      float x2,
+      float y2,
+      float z2,
+      float u2,
+      float v2,
+      float x3,
+      float y3,
+      float z3,
+      float u3,
+      float v3,
+      float x4,
+      float y4,
+      float z4,
+      float u4,
+      float v4,
+      string texturePath,
+      Color4 color,
+      TextureMinFilter min,
+      TextureMagFilter mag)
+    {
+      Texture texture = new Texture(texturePath, min, mag);
+      double num1 = (double) x1 - (double) (this.Width / 2);
+      float num2 = y1 - (float) (this.Height / 2);
+      double num3 = (double) (this.Width / 2);
+      float num4 = (float) (num1 / num3);
+      float num5 = num2 / (float) (this.Height / 2);
+      double num6 = (double) x2 - (double) (this.Width / 2);
+      float num7 = y2 - (float) (this.Height / 2);
+      double num8 = (double) (this.Width / 2);
+      float num9 = (float) (num6 / num8);
+      float num10 = num7 / (float) (this.Height / 2);
+      double num11 = (double) x3 - (double) (this.Width / 2);
+      float num12 = y3 - (float) (this.Height / 2);
+      double num13 = (double) (this.Width / 2);
+      float num14 = (float) (num11 / num13);
+      float num15 = num12 / (float) (this.Height / 2);
+      double num16 = (double) x4 - (double) (this.Width / 2);
+      float num17 = y4 - (float) (this.Height / 2);
+      double num18 = (double) (this.Width / 2);
+      float num19 = (float) (num16 / num18);
+      float num20 = num17 / (float) (this.Height / 2);
+      float[] data = new float[30]
+      {
+        num4,
+        num5,
+        z1,
+        u1,
+        (float) -((double) v1 - 1.0),
+        num9,
+        num10,
+        z2,
+        u2,
+        (float) -((double) v2 - 1.0),
+        num14,
+        num15,
+        z3,
+        u3,
+        (float) -((double) v3 - 1.0),
+        num4,
+        num5,
+        z2,
+        u1,
+        (float) -((double) v1 - 1.0),
+        num14,
+        num15,
+        z3,
+        u3,
+        (float) -((double) v3 - 1.0),
+        num19,
+        num20,
+        z4,
+        u4,
+        (float) -((double) v4 - 1.0)
+      };
+      int num21 = GL.GenBuffer();
+      GL.BindBuffer(BufferTarget.ArrayBuffer, num21);
+      GL.BufferData<float>(BufferTarget.ArrayBuffer, data.Length * 4, data, BufferUsageHint.DynamicDraw);
+      texture.Use();
+      this._2dTextured.Use();
+      int num22 = GL.GenVertexArray();
+      GL.BindVertexArray(num22);
+      GL.BindBuffer(BufferTarget.ArrayBuffer, num21);
+      int attribLocation1 = this._2dTextured.GetAttribLocation("aPosition");
+      GL.EnableVertexAttribArray(attribLocation1);
+      GL.VertexAttribPointer(attribLocation1, 3, VertexAttribPointerType.Float, false, 20, 0);
+      int attribLocation2 = this._2dTextured.GetAttribLocation("aTexCoord");
+      GL.EnableVertexAttribArray(attribLocation2);
+      GL.VertexAttribPointer(attribLocation2, 2, VertexAttribPointerType.Float, false, 20, 12);
+      GL.BindBuffer(BufferTarget.ArrayBuffer, num21);
+      GL.BindVertexArray(num22);
+      texture.Use();
+      this._2dTextured.Use();
+      this._2dTextured.SetVector4("lightColor", new Vector4(color.R, color.G, color.B, color.A));
+      GL.DrawArrays(PrimitiveType.Triangles, 0, 6);
+      GL.DeleteBuffer(num21);
+      GL.DeleteTexture(texture.Handle);
+      GL.DeleteVertexArray(num22);
+    }
 
-        protected void drawTexturedQuad(float x1, float y1, float z1, float u1, float v1,
-                                      float x2, float y2, float z2, float u2, float v2,
-                                      float x3, float y3, float z3, float u3, float v3,
-                                      float x4, float y4, float z4, float u4, float v4, Bitmap textureBitmap, Color4 color, TextureMinFilter min, TextureMagFilter mag)
-        {
-            Texture texture = new Texture(textureBitmap, min, mag);
-            float x1Trans = x1 - (Width / 2);
-            float y1Trans = y1 - (Height / 2);
-            float x1Norm = x1Trans / (Width / 2);
-            float y1Norm = y1Trans / (Height / 2);
-            float x2Trans = x2 - (Width / 2);
-            float y2Trans = y2 - (Height / 2);
-            float x2Norm = x2Trans / (Width / 2);
-            float y2Norm = y2Trans / (Height / 2);
-            float x3Trans = x3 - (Width / 2);
-            float y3Trans = y3 - (Height / 2);
-            float x3Norm = x3Trans / (Width / 2);
-            float y3Norm = y3Trans / (Height / 2);
-            float x4Trans = x4 - (Width / 2);
-            float y4Trans = y4 - (Height / 2);
-            float x4Norm = x4Trans / (Width / 2);
-            float y4Norm = y4Trans / (Height / 2);
-
-            float[] vertices =
-            {
-                x1Norm, y1Norm, z1, u1, -(v1 - 1),
-                x2Norm, y2Norm, z2, u2, -(v2 - 1),
-                x3Norm, y3Norm, z3, u3, -(v3 - 1),
-
-                x1Norm, y1Norm, z2, u1, -(v1 - 1),
-                x3Norm, y3Norm, z3, u3, -(v3 - 1),
-                x4Norm, y4Norm, z4, u4, -(v4 - 1)
-            };
-
-            var vertexBufferObject = GL.GenBuffer();
-            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);
-            GL.BufferData(BufferTarget.ArrayBuffer, vertices.Length * sizeof(float), vertices, BufferUsageHint.DynamicDraw);
-
-            texture.Use();
-            _2dTextured.Use();
-
-            var mainObject = GL.GenVertexArray();
-            GL.BindVertexArray(mainObject);
-
-            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);
-
-            var positionLocation = _2dTextured.GetAttribLocation("aPosition");
-            GL.EnableVertexAttribArray(positionLocation);
-            GL.VertexAttribPointer(positionLocation, 3, VertexAttribPointerType.Float, false, 5 * sizeof(float), 0);
-
-            var texCoordLocation = _2dTextured.GetAttribLocation("aTexCoord");
-            GL.EnableVertexAttribArray(texCoordLocation);
-            GL.VertexAttribPointer(texCoordLocation, 2, VertexAttribPointerType.Float, false, 5 * sizeof(float), 3 * sizeof(float));
-
-            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);
-
-            GL.BindVertexArray(mainObject);
-
-            texture.Use();
-            _2dTextured.Use();
-
-            _2dTextured.SetVector4("lightColor", new Vector4(color.R, color.G, color.B, color.A));
-
-            GL.DrawArrays(PrimitiveType.Triangles, 0, 6);
-
-            GL.DeleteBuffer(vertexBufferObject);
-            GL.DeleteTexture(texture.Handle);
-            GL.DeleteVertexArray(mainObject);
-
-        }
+    protected void drawTexturedQuad(
+      float x1,
+      float y1,
+      float z1,
+      float u1,
+      float v1,
+      float x2,
+      float y2,
+      float z2,
+      float u2,
+      float v2,
+      float x3,
+      float y3,
+      float z3,
+      float u3,
+      float v3,
+      float x4,
+      float y4,
+      float z4,
+      float u4,
+      float v4,
+      Bitmap textureBitmap,
+      Color4 color,
+      TextureMinFilter min,
+      TextureMagFilter mag)
+    {
+      Texture texture = new Texture(textureBitmap, min, mag);
+      double num1 = (double) x1 - (double) (this.Width / 2);
+      float num2 = y1 - (float) (this.Height / 2);
+      double num3 = (double) (this.Width / 2);
+      float num4 = (float) (num1 / num3);
+      float num5 = num2 / (float) (this.Height / 2);
+      double num6 = (double) x2 - (double) (this.Width / 2);
+      float num7 = y2 - (float) (this.Height / 2);
+      double num8 = (double) (this.Width / 2);
+      float num9 = (float) (num6 / num8);
+      float num10 = num7 / (float) (this.Height / 2);
+      double num11 = (double) x3 - (double) (this.Width / 2);
+      float num12 = y3 - (float) (this.Height / 2);
+      double num13 = (double) (this.Width / 2);
+      float num14 = (float) (num11 / num13);
+      float num15 = num12 / (float) (this.Height / 2);
+      double num16 = (double) x4 - (double) (this.Width / 2);
+      float num17 = y4 - (float) (this.Height / 2);
+      double num18 = (double) (this.Width / 2);
+      float num19 = (float) (num16 / num18);
+      float num20 = num17 / (float) (this.Height / 2);
+      float[] data = new float[30]
+      {
+        num4,
+        num5,
+        z1,
+        u1,
+        (float) -((double) v1 - 1.0),
+        num9,
+        num10,
+        z2,
+        u2,
+        (float) -((double) v2 - 1.0),
+        num14,
+        num15,
+        z3,
+        u3,
+        (float) -((double) v3 - 1.0),
+        num4,
+        num5,
+        z2,
+        u1,
+        (float) -((double) v1 - 1.0),
+        num14,
+        num15,
+        z3,
+        u3,
+        (float) -((double) v3 - 1.0),
+        num19,
+        num20,
+        z4,
+        u4,
+        (float) -((double) v4 - 1.0)
+      };
+      int num21 = GL.GenBuffer();
+      GL.BindBuffer(BufferTarget.ArrayBuffer, num21);
+      GL.BufferData<float>(BufferTarget.ArrayBuffer, data.Length * 4, data, BufferUsageHint.DynamicDraw);
+      texture.Use();
+      this._2dTextured.Use();
+      int num22 = GL.GenVertexArray();
+      GL.BindVertexArray(num22);
+      GL.BindBuffer(BufferTarget.ArrayBuffer, num21);
+      int attribLocation1 = this._2dTextured.GetAttribLocation("aPosition");
+      GL.EnableVertexAttribArray(attribLocation1);
+      GL.VertexAttribPointer(attribLocation1, 3, VertexAttribPointerType.Float, false, 20, 0);
+      int attribLocation2 = this._2dTextured.GetAttribLocation("aTexCoord");
+      GL.EnableVertexAttribArray(attribLocation2);
+      GL.VertexAttribPointer(attribLocation2, 2, VertexAttribPointerType.Float, false, 20, 12);
+      GL.BindBuffer(BufferTarget.ArrayBuffer, num21);
+      GL.BindVertexArray(num22);
+      texture.Use();
+      this._2dTextured.Use();
+      this._2dTextured.SetVector4("lightColor", new Vector4(color.R, color.G, color.B, color.A));
+      GL.DrawArrays(PrimitiveType.Triangles, 0, 6);
+      GL.DeleteBuffer(num21);
+      GL.DeleteTexture(texture.Handle);
+      GL.DeleteVertexArray(num22);
+    }
 
-        protected void drawTexturedQuad(float x1, float y1, float z1, float u1, float v1,
-                                      float x2, float y2, float z2, float u2, float v2,
-                                      float x3, float y3, float z3, float u3, float v3,
-                                      float x4, float y4, float z4, float u4, float v4, Texture texture, Color4 color)
-        {
-            float x1Trans = x1 - (Width / 2);
-            float y1Trans = y1 - (Height / 2);
-            float x1Norm = x1Trans / (Width / 2);
-            float y1Norm = y1Trans / (Height / 2);
-            float x2Trans = x2 - (Width / 2);
-            float y2Trans = y2 - (Height / 2);
-            float x2Norm = x2Trans / (Width / 2);
-            float y2Norm = y2Trans / (Height / 2);
-            float x3Trans = x3 - (Width / 2);
-            float y3Trans = y3 - (Height / 2);
-            float x3Norm = x3Trans / (Width / 2);
-            float y3Norm = y3Trans / (Height / 2);
-            float x4Trans = x4 - (Width / 2);
-            float y4Trans = y4 - (Height / 2);
-            float x4Norm = x4Trans / (Width / 2);
-            float y4Norm = y4Trans / (Height / 2);
-
-            float[] vertices =
-            {
-                x1Norm, y1Norm, z1, u1, -(v1 - 1),
-                x2Norm, y2Norm, z2, u2, -(v2 - 1),
-                x3Norm, y3Norm, z3, u3, -(v3 - 1),
-
-                x1Norm, y1Norm, z2, u1, -(v1 - 1),
-                x3Norm, y3Norm, z3, u3, -(v3 - 1),
-                x4Norm, y4Norm, z4, u4, -(v4 - 1)
-            };
-
-            var vertexBufferObject = GL.GenBuffer();
-            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);
-            GL.BufferData(BufferTarget.ArrayBuffer, vertices.Length * sizeof(float), vertices, BufferUsageHint.DynamicDraw);
-
-            texture.Use();
-            _2dTextured.Use();
-
-            var mainObject = GL.GenVertexArray();
-            GL.BindVertexArray(mainObject);
-
-            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);
-
-            var positionLocation = _2dTextured.GetAttribLocation("aPosition");
-            GL.EnableVertexAttribArray(positionLocation);
-            GL.VertexAttribPointer(positionLocation, 3, VertexAttribPointerType.Float, false, 5 * sizeof(float), 0);
-
-            var texCoordLocation = _2dTextured.GetAttribLocation("aTexCoord");
-            GL.EnableVertexAttribArray(texCoordLocation);
-            GL.VertexAttribPointer(texCoordLocation, 2, VertexAttribPointerType.Float, false, 5 * sizeof(float), 3 * sizeof(float));
-
-            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);
-
-            GL.BindVertexArray(mainObject);
-
-            texture.Use();
-            _2dTextured.Use();
-
-            _2dTextured.SetVector4("lightColor", new Vector4(color.R, color.G, color.B, color.A));
-
-            GL.DrawArrays(PrimitiveType.Triangles, 0, 6);
-
-            GL.DeleteBuffer(vertexBufferObject);
-            GL.DeleteVertexArray(mainObject);
-
-        }
+    protected void drawTexturedQuad(
+      float x1,
+      float y1,
+      float z1,
+      float u1,
+      float v1,
+      float x2,
+      float y2,
+      float z2,
+      float u2,
+      float v2,
+      float x3,
+      float y3,
+      float z3,
+      float u3,
+      float v3,
+      float x4,
+      float y4,
+      float z4,
+      float u4,
+      float v4,
+      Texture texture,
+      Color4 color,
+      TextureMinFilter min,
+      TextureMagFilter mag)
+    {
+      double num1 = (double) x1 - (double) (this.Width / 2);
+      float num2 = y1 - (float) (this.Height / 2);
+      double num3 = (double) (this.Width / 2);
+      float num4 = (float) (num1 / num3);
+      float num5 = num2 / (float) (this.Height / 2);
+      double num6 = (double) x2 - (double) (this.Width / 2);
+      float num7 = y2 - (float) (this.Height / 2);
+      double num8 = (double) (this.Width / 2);
+      float num9 = (float) (num6 / num8);
+      float num10 = num7 / (float) (this.Height / 2);
+      double num11 = (double) x3 - (double) (this.Width / 2);
+      float num12 = y3 - (float) (this.Height / 2);
+      double num13 = (double) (this.Width / 2);
+      float num14 = (float) (num11 / num13);
+      float num15 = num12 / (float) (this.Height / 2);
+      double num16 = (double) x4 - (double) (this.Width / 2);
+      float num17 = y4 - (float) (this.Height / 2);
+      double num18 = (double) (this.Width / 2);
+      float num19 = (float) (num16 / num18);
+      float num20 = num17 / (float) (this.Height / 2);
+      float[] data = new float[30]
+      {
+        num4,
+        num5,
+        z1,
+        u1,
+        (float) -((double) v1 - 1.0),
+        num9,
+        num10,
+        z2,
+        u2,
+        (float) -((double) v2 - 1.0),
+        num14,
+        num15,
+        z3,
+        u3,
+        (float) -((double) v3 - 1.0),
+        num4,
+        num5,
+        z2,
+        u1,
+        (float) -((double) v1 - 1.0),
+        num14,
+        num15,
+        z3,
+        u3,
+        (float) -((double) v3 - 1.0),
+        num19,
+        num20,
+        z4,
+        u4,
+        (float) -((double) v4 - 1.0)
+      };
+      int num21 = GL.GenBuffer();
+      GL.BindBuffer(BufferTarget.ArrayBuffer, num21);
+      GL.BufferData<float>(BufferTarget.ArrayBuffer, data.Length * 4, data, BufferUsageHint.DynamicDraw);
+      texture.Use();
+      this._2dTextured.Use();
+      int num22 = GL.GenVertexArray();
+      GL.BindVertexArray(num22);
+      GL.BindBuffer(BufferTarget.ArrayBuffer, num21);
+      int attribLocation1 = this._2dTextured.GetAttribLocation("aPosition");
+      GL.EnableVertexAttribArray(attribLocation1);
+      GL.VertexAttribPointer(attribLocation1, 3, VertexAttribPointerType.Float, false, 20, 0);
+      int attribLocation2 = this._2dTextured.GetAttribLocation("aTexCoord");
+      GL.EnableVertexAttribArray(attribLocation2);
+      GL.VertexAttribPointer(attribLocation2, 2, VertexAttribPointerType.Float, false, 20, 12);
+      GL.BindBuffer(BufferTarget.ArrayBuffer, num21);
+      GL.BindVertexArray(num22);
+      texture.Use();
+      this._2dTextured.Use();
+      this._2dTextured.SetVector4("lightColor", new Vector4(color.R, color.G, color.B, color.A));
+      GL.DrawArrays(PrimitiveType.Triangles, 0, 6);
+      GL.DeleteBuffer(num21);
+      GL.DeleteVertexArray(num22);
+    }
 
-        protected void drawQuad(float x1, float y1, float z1, 
-                                float x2, float y2, float z2, 
-                                float x3, float y3, float z3,
-                                float x4, float y4, float z4, Color4 color)
-        {
-            float x1Trans = x1 - (Width / 2);
-            float y1Trans = y1 - (Height / 2);
-            float x1Norm = x1Trans / (Width / 2);
-            float y1Norm = y1Trans / (Height / 2);
-            float x2Trans = x2 - (Width / 2);
-            float y2Trans = y2 - (Height / 2);
-            float x2Norm = x2Trans / (Width / 2);
-            float y2Norm = y2Trans / (Height / 2);
-            float x3Trans = x3 - (Width / 2);
-            float y3Trans = y3 - (Height / 2);
-            float x3Norm = x3Trans / (Width / 2);
-            float y3Norm = y3Trans / (Height / 2);
-            float x4Trans = x4 - (Width / 2);
-            float y4Trans = y4 - (Height / 2);
-            float x4Norm = x4Trans / (Width / 2);
-            float y4Norm = y4Trans / (Height / 2);
-                    
-            float[] vertices =
-            {
-                x1Norm, y1Norm, z1,
-                x2Norm, y2Norm, z2,
-                x3Norm, y3Norm, z3,
-                        
-                x2Norm, y2Norm, z2,
-                x3Norm, y3Norm, z3,
-                x4Norm, y4Norm, z4
-            };
-                    
-            var vertexBufferObject = GL.GenBuffer();
-            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);
-            GL.BufferData(BufferTarget.ArrayBuffer, vertices.Length * sizeof(float), vertices, BufferUsageHint.DynamicDraw);
-                    
-            _2dShader.Use();
-                    
-            var mainObject = GL.GenVertexArray();
-            GL.BindVertexArray(mainObject);
-                    
-            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);
-        
-            var positionLocation = _2dShader.GetAttribLocation("aPos");
-            GL.EnableVertexAttribArray(positionLocation);
-            GL.VertexAttribPointer(positionLocation, 3, VertexAttribPointerType.Float, false, 3 * sizeof(float), 0);
-                    
-                    
-            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);
-                    
-            GL.BindVertexArray(mainObject);
-                    
-            _2dShader.Use();
-                    
-            _2dShader.SetVector4("lightColor", new Vector4(color.R, color.G, color.B, color.A));
-        
-            GL.DrawArrays(PrimitiveType.Triangles, 0, 6);
-                    
-            GL.DeleteBuffer(vertexBufferObject);
-            GL.DeleteVertexArray(mainObject);
-        
-        }
-        
-        protected void drawEllipse(float x, float y, float radiusX, float radiusY, Color4 color)
-        {
-            int numEllipseVertices = (int)Math.Floor(Math.Sqrt(radiusX * radiusX + radiusY * radiusY));
-            Vector3[] tempVertices = new Vector3[numEllipseVertices];
-            
-            float xTrans = x - (Width / 2);
-            float yTrans = y - (Height / 2);
-            float xNorm = xTrans / (Width / 2);
-            float yNorm = yTrans / (Height / 2);
-            float radiusXNorm = radiusX / (Width / 2);
-            float radiusYNorm = radiusY / (Height / 2);
-
-
-            var step = (float)(Math.PI * 2) / (numEllipseVertices - 1);
-            
-            for(var i=0; i < numEllipseVertices; i++)
-            {
-                var rad = i * step;
-                tempVertices[i] = new Vector3(((float) Math.Cos(rad) * radiusXNorm) + xNorm, ((float) Math.Sin(rad) * radiusYNorm) - yNorm, 0.0f);
-            }
-            
-
-            var tempVerticesList = new List<float> {xNorm, -yNorm, 0f,};
-            for (var i = 0; i < numEllipseVertices; i++)
-            {
-                tempVerticesList.AddRange(new []
-                {
-                    tempVertices[i].X, tempVertices[i].Y, tempVertices[i].Z,
-                });
-            }
+    protected void drawQuad(
+      float x1,
+      float y1,
+      float z1,
+      float x2,
+      float y2,
+      float z2,
+      float x3,
+      float y3,
+      float z3,
+      float x4,
+      float y4,
+      float z4,
+      Color4 color)
+    {
+      double num1 = (double) x1 - (double) (this.Width / 2);
+      float num2 = y1 - (float) (this.Height / 2);
+      double num3 = (double) (this.Width / 2);
+      float num4 = (float) (num1 / num3);
+      float num5 = num2 / (float) (this.Height / 2);
+      double num6 = (double) x2 - (double) (this.Width / 2);
+      float num7 = y2 - (float) (this.Height / 2);
+      double num8 = (double) (this.Width / 2);
+      float num9 = (float) (num6 / num8);
+      float num10 = num7 / (float) (this.Height / 2);
+      double num11 = (double) x3 - (double) (this.Width / 2);
+      float num12 = y3 - (float) (this.Height / 2);
+      double num13 = (double) (this.Width / 2);
+      float num14 = (float) (num11 / num13);
+      float num15 = num12 / (float) (this.Height / 2);
+      double num16 = (double) x4 - (double) (this.Width / 2);
+      float num17 = y4 - (float) (this.Height / 2);
+      double num18 = (double) (this.Width / 2);
+      float num19 = (float) (num16 / num18);
+      float num20 = num17 / (float) (this.Height / 2);
+      float[] data = new float[18]
+      {
+        num4,
+        num5,
+        z1,
+        num9,
+        num10,
+        z2,
+        num14,
+        num15,
+        z3,
+        num9,
+        num10,
+        z2,
+        num14,
+        num15,
+        z3,
+        num19,
+        num20,
+        z4
+      };
+      int num21 = GL.GenBuffer();
+      GL.BindBuffer(BufferTarget.ArrayBuffer, num21);
+      GL.BufferData<float>(BufferTarget.ArrayBuffer, data.Length * 4, data, BufferUsageHint.DynamicDraw);
+      this._2dShader.Use();
+      int num22 = GL.GenVertexArray();
+      GL.BindVertexArray(num22);
+      GL.BindBuffer(BufferTarget.ArrayBuffer, num21);
+      int attribLocation = this._2dShader.GetAttribLocation("aPos");
+      GL.EnableVertexAttribArray(attribLocation);
+      GL.VertexAttribPointer(attribLocation, 3, VertexAttribPointerType.Float, false, 12, 0);
+      GL.BindBuffer(BufferTarget.ArrayBuffer, num21);
+      GL.BindVertexArray(num22);
+      this._2dShader.Use();
+      this._2dShader.SetVector4("lightColor", new Vector4(color.R, color.G, color.B, color.A));
+      GL.DrawArrays(PrimitiveType.Triangles, 0, 6);
+      GL.DeleteBuffer(num21);
+      GL.DeleteVertexArray(num22);
+    }
+
+    protected void drawEllipse(float x, float y, float radiusX, float radiusY, Color4 color)
+    {
+      int length = (int) Math.Floor(Math.Sqrt((double) radiusX * (double) radiusX + (double) radiusY * (double) radiusY));
+      Vector3[] vector3Array = new Vector3[length];
+      double num1 = (double) x - (double) (this.Width / 2);
+      float num2 = y - (float) (this.Height / 2);
+      double num3 = (double) (this.Width / 2);
+      float num4 = (float) (num1 / num3);
+      float num5 = num2 / (float) (this.Height / 2);
+      float num6 = radiusX / (float) (this.Width / 2);
+      float num7 = radiusY / (float) (this.Height / 2);
+      float num8 = 6.283185f / (float) (length - 1);
+      for (int index = 0; index < length; ++index)
+      {
+        float num9 = (float) index * num8;
+        vector3Array[index] = new Vector3((float) Math.Cos((double) num9) * num6 + num4, (float) Math.Sin((double) num9) * num7 - num5, 0.0f);
+      }
+      List<float> floatList = new List<float>()
+      {
+        num4,
+        -num5,
+        0.0f
+      };
+      for (int index = 0; index < length; ++index)
+        floatList.AddRange((IEnumerable<float>) new float[3]
+        {
+          vector3Array[index].X,
+          vector3Array[index].Y,
+          vector3Array[index].Z
+        });
+      float[] array = floatList.ToArray();
+      int num10 = GL.GenBuffer();
+      GL.BindBuffer(BufferTarget.ArrayBuffer, num10);
+      GL.BufferData<float>(BufferTarget.ArrayBuffer, array.Length * 4, array, BufferUsageHint.DynamicDraw);
+      this._2dShader.Use();
+      int num11 = GL.GenVertexArray();
+      GL.BindVertexArray(num11);
+      int attribLocation = this._2dShader.GetAttribLocation("aPos");
+      GL.EnableVertexAttribArray(attribLocation);
+      GL.VertexAttribPointer(attribLocation, 3, VertexAttribPointerType.Float, false, 12, 0);
+      GL.BindBuffer(BufferTarget.ArrayBuffer, num10);
+      GL.BindVertexArray(num11);
+      this._2dShader.SetVector4("lightColor", new Vector4(color.R, color.G, color.B, color.A));
+      this._2dShader.Use();
+      GL.DrawArrays(PrimitiveType.TriangleFan, 0, length + 1);
+      GL.DeleteBuffer(num10);
+      GL.DeleteVertexArray(num11);
+    }
 
-            var vertices = tempVerticesList.ToArray();
-            
-
-            var vertexBufferObject = GL.GenBuffer();
-            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);
-            GL.BufferData(BufferTarget.ArrayBuffer, vertices.Length * sizeof(float), vertices, BufferUsageHint.DynamicDraw);
-
-            _2dShader.Use();
-            
-            var mainObject = GL.GenVertexArray();
-            GL.BindVertexArray(mainObject);
-
-            var positionLocation = _2dShader.GetAttribLocation("aPos");
-            GL.EnableVertexAttribArray(positionLocation);
-            GL.VertexAttribPointer(positionLocation, 3, VertexAttribPointerType.Float, false, 3 * sizeof(float), 0);
-
-            
-            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);
-
-            GL.BindVertexArray(mainObject);
-            
-            _2dShader.SetVector4("lightColor", new Vector4(color.R, color.G, color.B, color.A));
-            
-            _2dShader.Use();
-            GL.DrawArrays(PrimitiveType.TriangleFan, 0, numEllipseVertices + 1);
-            
-            GL.DeleteBuffer(vertexBufferObject);
-            GL.DeleteVertexArray(mainObject);
-        }
-
-        public void drawTriangle(float x1, float y1, float x2, float y2, float x3, float y3, Color4 color)
-        {
-            float x1Trans = x1 - (Width / 2);
-            float y1Trans = y1 - (Height / 2);
-            float x1Norm = x1Trans / (Width / 2);
-            float y1Norm = y1Trans / (Height / 2);
-            float x2Trans = x2 - (Width / 2);
-            float y2Trans = y2 - (Height / 2);
-            float x2Norm = x2Trans / (Width / 2);
-            float y2Norm = y2Trans / (Height / 2);
-            float x3Trans = x3 - (Width / 2);
-            float y3Trans = y3 - (Height / 2);
-            float x3Norm = x3Trans / (Width / 2);
-            float y3Norm = y3Trans / (Height / 2);
-            float[] vertices =
-            {
-                x1Norm, -y1Norm, 0f,
-                x2Norm, -y2Norm, 0f,
-                x3Norm, -y3Norm, 0f,
-            };
-
-            var vertexBufferObject = GL.GenBuffer();
-            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);
-            GL.BufferData(BufferTarget.ArrayBuffer, vertices.Length * sizeof(float), vertices, BufferUsageHint.DynamicDraw);
-
-            _2dShader.Use();
-            
-            var mainObject = GL.GenVertexArray();
-            GL.BindVertexArray(mainObject);
-
-            var positionLocation = _2dShader.GetAttribLocation("aPos");
-            GL.EnableVertexAttribArray(positionLocation);
-            GL.VertexAttribPointer(positionLocation, 3, VertexAttribPointerType.Float, false, 3 * sizeof(float), 0);
-
-            
-            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBufferObject);
-
-            GL.BindVertexArray(mainObject);
-            
-            _2dShader.SetVector4("lightColor", new Vector4(color.R, color.G, color.B, color.A));
-            
-            _2dShader.Use();
-            GL.DrawArrays(PrimitiveType.Triangles, 0, 3);
-            
-            GL.DeleteBuffer(vertexBufferObject);
-            GL.DeleteVertexArray(mainObject);
+    public void drawTriangle(
+      float x1,
+      float y1,
+      float x2,
+      float y2,
+      float x3,
+      float y3,
+      Color4 color)
+    {
+      double num1 = (double) x1 - (double) (this.Width / 2);
+      float num2 = y1 - (float) (this.Height / 2);
+      double num3 = (double) (this.Width / 2);
+      float num4 = (float) (num1 / num3);
+      float num5 = num2 / (float) (this.Height / 2);
+      double num6 = (double) x2 - (double) (this.Width / 2);
+      float num7 = y2 - (float) (this.Height / 2);
+      double num8 = (double) (this.Width / 2);
+      float num9 = (float) (num6 / num8);
+      float num10 = num7 / (float) (this.Height / 2);
+      double num11 = (double) x3 - (double) (this.Width / 2);
+      float num12 = y3 - (float) (this.Height / 2);
+      double num13 = (double) (this.Width / 2);
+      float num14 = (float) (num11 / num13);
+      float num15 = num12 / (float) (this.Height / 2);
+      float[] data = new float[9]
+      {
+        num4,
+        -num5,
+        0.0f,
+        num9,
+        -num10,
+        0.0f,
+        num14,
+        -num15,
+        0.0f
+      };
+      int num16 = GL.GenBuffer();
+      GL.BindBuffer(BufferTarget.ArrayBuffer, num16);
+      GL.BufferData<float>(BufferTarget.ArrayBuffer, data.Length * 4, data, BufferUsageHint.DynamicDraw);
+      this._2dShader.Use();
+      int num17 = GL.GenVertexArray();
+      GL.BindVertexArray(num17);
+      int attribLocation = this._2dShader.GetAttribLocation("aPos");
+      GL.EnableVertexAttribArray(attribLocation);
+      GL.VertexAttribPointer(attribLocation, 3, VertexAttribPointerType.Float, false, 12, 0);
+      GL.BindBuffer(BufferTarget.ArrayBuffer, num16);
+      GL.BindVertexArray(num17);
+      this._2dShader.SetVector4("lightColor", new Vector4(color.R, color.G, color.B, color.A));
+      this._2dShader.Use();
+      GL.DrawArrays(PrimitiveType.Triangles, 0, 3);
+      GL.DeleteBuffer(num16);
+      GL.DeleteVertexArray(num17);
+    }
+
+    protected void Clear() => GL.Clear(ClearBufferMask.DepthBufferBit | ClearBufferMask.ColorBufferBit);
 
-        }
-        protected void Clear()
-        {
-            GL.Clear(ClearBufferMask.ColorBufferBit | ClearBufferMask.DepthBufferBit);
-        }
+    public void drawText(
+      string text,
+      int px,
+      float x,
+      float y,
+      MainRenderWindow.Font f,
+      Color4 col)
+    {
+      byte[] bytes = Encoding.ASCII.GetBytes(text);
+      int num1 = 0;
+      foreach (byte num2 in bytes)
+      {
+        int index = Array.IndexOf<int>(f.data["ids"], (int) num2);
+        float num3 = (float) f.data["xs"][index] / (float) f.fontWidth;
+        float num4 = (float) f.data["ys"][index] / (float) f.fontWidth;
+        int num5 = (int) ((double) px / (double) f.data["heights"][index] * (double) f.data["widths"][index]);
+        int num6 = px;
+        float num7 = num3 + (float) f.data["widths"][index] / (float) f.fontWidth;
+        float num8 = num4 - (float) f.data["heights"][index] / (float) f.fontWidth;
+        this.drawTexturedQuad(x + (float) num1, y, 1f, num3, num8, x + (float) num1, y + (float) num6, 1f, num3, num4, x + (float) num5 + (float) num1, y + (float) num6, 1f, num7, num4, x + (float) num5 + (float) num1, y, 1f, num7, num8, f.font, col, TextureMinFilter.Nearest, TextureMagFilter.Nearest);
+        num1 += num5;
+      }
+    }
+
+    public int getPhraseLength(string text, int px, MainRenderWindow.Font f)
+    {
+      byte[] bytes = Encoding.ASCII.GetBytes(text);
+      int num1 = 0;
+      foreach (byte num2 in bytes)
+      {
+        int index = Array.IndexOf<int>(f.data["ids"], (int) num2);
+        int num3 = (int) ((double) px / (double) f.data["heights"][index] * (double) f.data["widths"][index]);
+        num1 += num3;
+      }
+      return num1;
+    }
+
+    public void SetSettings(MainRenderWindow.Settings s) => this.set = s;
+
+    public void showSettings(MainRenderWindow.Settings s)
+    {
+      int int32_1 = Convert.ToInt32(s.settings["width"]);
+      int int32_2 = Convert.ToInt32(s.settings["height"]);
+      Vector2 vector2 = new Vector2((float) ((this.Width - int32_1) / 2), (float) ((this.Height - int32_2) / 2));
+      if (Convert.ToBoolean(s.settings["useTexture"]))
+      {
+        string texturePath = Convert.ToString(s.settings["texturePath"]);
+        this.drawTexturedRectangle(vector2.X, vector2.Y, 0.0f, 0.0f, vector2.X + (float) int32_1, vector2.Y + (float) int32_2, 1f, 1f, texturePath, Color4.White, TextureMinFilter.Nearest, TextureMagFilter.Nearest);
+      }
+      else
+      {
+        Color4 color = new Color4((float) Convert.ToInt32(s.settings["r"]), (float) Convert.ToInt32(s.settings["g"]), (float) Convert.ToInt32(s.settings["b"]), (float) Convert.ToInt32(s.settings["a"]));
+        this.drawRectangle(vector2.X, vector2.Y, vector2.X + (float) int32_1, vector2.Y + (float) int32_2, color);
+      }
+      foreach (MainRenderWindow.Settings.Button button in s.buttons)
+      {
+        float x1 = button.pos.X + vector2.X;
+        float y1 = button.pos.Y + vector2.Y;
+        this.drawRectangle(x1, y1, x1 + (float) button.width, y1 + (float) button.height, button.col);
+        if (button.l == -1)
+          button.l = this.getPhraseLength(button.Text, Math.Min(button.height, 32), button.font);
+        this.drawText(button.Text, Math.Min(button.height, 32), x1 + (float) ((button.width - button.l) / 2), y1 + (float) ((button.height - Math.Min(button.height, 32)) / 2), button.font, Color4.White);
+        button.setCol(Color4.Blue);
+      }
+    }
+
+    private void checkClicks(MainRenderWindow.Settings s)
+    {
+      int int32_1 = Convert.ToInt32(s.settings["width"]);
+      int int32_2 = Convert.ToInt32(s.settings["height"]);
+      foreach (MainRenderWindow.Settings.Button button in s.buttons)
+      {
+        Vector2 vector2 = new Vector2((float) ((this.Width - int32_1) / 2), (float) ((this.Height - int32_2) / 2));
+        MouseState cursorState = Mouse.GetCursorState();
+        float num1 = (float) (cursorState.X - this.X - 8) - vector2.X;
+        float num2 = (float) -(cursorState.Y - this.Y - 30 - this.Height) - vector2.Y;
+        if ((double) num1 >= (double) button.pos.X && (double) num1 <= (double) button.pos.X + (double) button.width && ((double) num2 >= (double) button.pos.Y && (double) num2 <= (double) button.pos.Y + (double) button.height))
+        {
+          button.setCol(Color4.Red);
+          object obj = button.onClick();
+        }
+      }
+    }
+
+    private class Object
+    {
+      private readonly int _vertexBufferObject;
+      private readonly int _mainObject;
+      private readonly float[] _vertices;
+      private float _rotX;
+      private float _rotY;
+      private float _rotZ;
+      private Vector3 _pos;
+      private readonly Vector3 _color;
+      private readonly Shader _shader;
+      private readonly MainRenderWindow.Lamp _lamp;
+      private float _scale = 1f;
+
+      public Object(string path, Shader lightingShader, MainRenderWindow.Lamp lamp, Vector3 col)
+      {
+        this._vertices = MainRenderWindow.loadObj(path);
+        this._vertexBufferObject = GL.GenBuffer();
+        GL.BindBuffer(BufferTarget.ArrayBuffer, this._vertexBufferObject);
+        GL.BufferData<float>(BufferTarget.ArrayBuffer, this._vertices.Length * 4, this._vertices, BufferUsageHint.StaticDraw);
+        this._mainObject = GL.GenVertexArray();
+        GL.BindVertexArray(this._mainObject);
+        GL.BindBuffer(BufferTarget.ArrayBuffer, this._vertexBufferObject);
+        int attribLocation1 = lightingShader.GetAttribLocation("aPos");
+        GL.EnableVertexAttribArray(attribLocation1);
+        GL.VertexAttribPointer(attribLocation1, 3, VertexAttribPointerType.Float, false, 24, 0);
+        int attribLocation2 = lightingShader.GetAttribLocation("aNormal");
+        GL.EnableVertexAttribArray(attribLocation2);
+        GL.VertexAttribPointer(attribLocation2, 3, VertexAttribPointerType.Float, false, 24, 12);
+        this._rotX = 0.0f;
+        this._rotY = 0.0f;
+        this._rotZ = 0.0f;
+        this._pos = new Vector3(0.0f, 0.0f, 0.0f);
+        this._shader = lightingShader;
+        this._lamp = lamp;
+        this._color = col;
+      }
+
+      public Object(
+        float[] vertices,
+        Shader lightingShader,
+        MainRenderWindow.Lamp lamp,
+        Vector3 col)
+      {
+        this._vertices = vertices;
+        this._vertexBufferObject = GL.GenBuffer();
+        GL.BindBuffer(BufferTarget.ArrayBuffer, this._vertexBufferObject);
+        GL.BufferData<float>(BufferTarget.ArrayBuffer, this._vertices.Length * 4, this._vertices, BufferUsageHint.StaticDraw);
+        this._mainObject = GL.GenVertexArray();
+        GL.BindVertexArray(this._mainObject);
+        GL.BindBuffer(BufferTarget.ArrayBuffer, this._vertexBufferObject);
+        int attribLocation1 = lightingShader.GetAttribLocation("aPos");
+        GL.EnableVertexAttribArray(attribLocation1);
+        GL.VertexAttribPointer(attribLocation1, 3, VertexAttribPointerType.Float, false, 24, 0);
+        int attribLocation2 = lightingShader.GetAttribLocation("aNormal");
+        GL.EnableVertexAttribArray(attribLocation2);
+        GL.VertexAttribPointer(attribLocation2, 3, VertexAttribPointerType.Float, false, 24, 12);
+        this._rotX = 0.0f;
+        this._rotY = 0.0f;
+        this._rotZ = 0.0f;
+        this._pos = new Vector3(0.0f, 0.0f, 0.0f);
+        this._shader = lightingShader;
+        this._lamp = lamp;
+        this._color = col;
+      }
+
+      public void show(Camera camera)
+      {
+        GL.BindVertexArray(this._mainObject);
+        this._shader.Use();
+        this._shader.SetMatrix4("model", Matrix4.CreateScale(this._scale) * Matrix4.CreateRotationX(this._rotX) * Matrix4.CreateRotationX(this._rotY) * Matrix4.CreateRotationZ(this._rotZ) * Matrix4.CreateTranslation(this._pos));
+        this._shader.SetMatrix4("view", camera.GetViewMatrix());
+        this._shader.SetMatrix4("projection", camera.GetProjectionMatrix());
+        this._shader.SetVector3("objectColor", this._color);
+        this._shader.SetVector3("lightColor", this._lamp.LightColor);
+        this._shader.SetVector3("lightPos", this._lamp.Pos);
+        GL.DrawArrays(PrimitiveType.Triangles, 0, this._vertices.Length / 6);
+      }
 
-        public void drawText(string text, int px, float x, float y, Font f, Color4 col)
-        {
-            byte[] ids = Encoding.ASCII.GetBytes(text);
-            int xoff = 0;
-            foreach (byte b in ids)
-            {
-                int i = Array.IndexOf(f.data["ids"], b);
-                float u = (float)f.data["xs"][i] / (float)f.fontWidth;
-                float v = (float)f.data["ys"][i] / (float)f.fontWidth;
-                int width = (int)(((float)px / (float)f.data["heights"][i]) * f.data["widths"][i]);
-                int height = px;
-                float uoff = u + ((float)f.data["widths"][i] / (float)f.fontWidth);
-                float voff = v - ((float)f.data["heights"][i] / (float)f.fontWidth);
+      public void setRotationX(float angle) => this._rotX = angle;
+
+      public void setRotationY(float angle) => this._rotY = angle;
+
+      public void setRotationZ(float angle) => this._rotZ = angle;
+
+      public void setPositionInSpace(float x, float y, float z) => this._pos = new Vector3(x, y, z);
+
+      public void setScale(float scale) => this._scale = scale;
+
+      public void Dispose()
+      {
+        GL.DeleteBuffer(this._vertexBufferObject);
+        GL.DeleteVertexArray(this._mainObject);
+      }
+    }
+
+    private class Lamp
+    {
+      private readonly int _vertexBufferObject;
+      private readonly int _mainObject;
+      public readonly Vector3 Pos;
+      public readonly Vector3 LightColor;
+      private readonly float[] _vertices;
 
-                drawTexturedQuad(
-                    x + xoff        , y         , 1f, u   , voff,
-                    x + xoff        , y + height, 1f, u   , v,
-                    x + width + xoff, y + height, 1f, uoff, v,
-                    x + width + xoff, y         , 1f, uoff, voff, f.font, col);
+      public Lamp(Vector3 pos, Vector3 lightColor, Shader lampShader)
+      {
+        this.Pos = pos;
+        this.LightColor = lightColor;
+        this._vertices = MainRenderWindow.loadObj("Objs/sphere.obj");
+        this._vertexBufferObject = GL.GenBuffer();
+        GL.BindBuffer(BufferTarget.ArrayBuffer, this._vertexBufferObject);
+        GL.BufferData<float>(BufferTarget.ArrayBuffer, this._vertices.Length * 4, this._vertices, BufferUsageHint.StaticDraw);
+        this._mainObject = GL.GenVertexArray();
+        GL.BindVertexArray(this._mainObject);
+        GL.BindBuffer(BufferTarget.ArrayBuffer, this._vertexBufferObject);
+        int attribLocation = lampShader.GetAttribLocation("aPos");
+        GL.EnableVertexAttribArray(attribLocation);
+        GL.VertexAttribPointer(attribLocation, 3, VertexAttribPointerType.Float, false, 24, 0);
+        lampShader.SetVector3(nameof (lightColor), lightColor);
+      }
 
-                xoff += width;            
-            }
-        }
+      public void show(Camera camera, Shader lampShader)
+      {
+        GL.BindVertexArray(this._mainObject);
+        lampShader.Use();
+        Matrix4 data = Matrix4.Identity * Matrix4.CreateScale(0.2f) * Matrix4.CreateTranslation(this.Pos);
+        lampShader.SetMatrix4("model", data);
+        lampShader.SetMatrix4("view", camera.GetViewMatrix());
+        lampShader.SetMatrix4("projection", camera.GetProjectionMatrix());
+        GL.DrawArrays(PrimitiveType.Triangles, 0, this._vertices.Length / 6);
+      }
+
+      public void Dispose()
+      {
+        GL.DeleteBuffer(this._vertexBufferObject);
+        GL.DeleteVertexArray(this._mainObject);
+      }
+    }
 
-        
-        
-        
-        public class Font
-        {
-            public Dictionary<string, int[]> data = new Dictionary<string, int[]>();
-            public Texture font;
-            public int fontWidth;
+    private class TexturedObject
+    {
+      private readonly int _vertexBufferObject;
+      private readonly int _mainObject;
+      private readonly float[] _vertices;
+      private float _rotX;
+      private float _rotY;
+      private float _rotZ;
+      private readonly Texture _texture;
+      private Vector3 _pos;
+      private readonly Shader _shader;
+
+      public TexturedObject(string path, Shader textureShader, string texturePath)
+      {
+        this._vertices = MainRenderWindow.loadObjTextured(path);
+        this._vertexBufferObject = GL.GenBuffer();
+        GL.BindBuffer(BufferTarget.ArrayBuffer, this._vertexBufferObject);
+        GL.BufferData<float>(BufferTarget.ArrayBuffer, this._vertices.Length * 4, this._vertices, BufferUsageHint.StaticDraw);
+        this._mainObject = GL.GenVertexArray();
+        GL.BindVertexArray(this._mainObject);
+        int attribLocation1 = textureShader.GetAttribLocation("aPos");
+        GL.EnableVertexAttribArray(attribLocation1);
+        GL.VertexAttribPointer(attribLocation1, 3, VertexAttribPointerType.Float, false, 32, 0);
+        int attribLocation2 = textureShader.GetAttribLocation("aNormal");
+        GL.EnableVertexAttribArray(attribLocation2);
+        GL.VertexAttribPointer(attribLocation2, 3, VertexAttribPointerType.Float, false, 32, 12);
+        int attribLocation3 = textureShader.GetAttribLocation("aTexture");
+        GL.EnableVertexAttribArray(attribLocation3);
+        GL.VertexAttribPointer(attribLocation3, 2, VertexAttribPointerType.Float, false, 32, 24);
+        this._texture = new Texture(texturePath, TextureMinFilter.Nearest, TextureMagFilter.Nearest);
+        this._texture.Use();
+        this._rotX = 0.0f;
+        this._rotY = 0.0f;
+        this._rotZ = 0.0f;
+        this._pos = new Vector3(0.0f, 0.0f, 0.0f);
+        this._shader = textureShader;
+      }
+
+      public void show(Camera camera)
+      {
+        GL.BindVertexArray(this._mainObject);
+        this._texture.Use();
+        this._shader.Use();
+        this._shader.SetMatrix4("model", Matrix4.CreateRotationX(this._rotX) * Matrix4.CreateRotationX(this._rotY) * Matrix4.CreateRotationZ(this._rotZ) * Matrix4.CreateTranslation(this._pos));
+        this._shader.SetMatrix4("view", camera.GetViewMatrix());
+        this._shader.SetMatrix4("projection", camera.GetProjectionMatrix());
+        GL.DrawArrays(PrimitiveType.Triangles, 0, this._vertices.Length / 8);
+      }
+
+      public void setRotationX(float angle) => this._rotX = angle;
+
+      public void setRotationY(float angle) => this._rotY = angle;
+
+      public void setRotationZ(float angle) => this._rotZ = angle;
+
+      public void setPositionInSpace(float x, float y, float z) => this._pos = new Vector3(x, y, z);
+
+      public void Dispose()
+      {
+        GL.DeleteBuffer(this._vertexBufferObject);
+        GL.DeleteVertexArray(this._mainObject);
+        GL.DeleteTexture(this._texture.Handle);
+      }
+    }
+
+    public class Font
+    {
+      public Dictionary<string, int[]> data = new Dictionary<string, int[]>();
+      public Texture font;
+      public int fontWidth;
 
-            public Font(string path, string path2)
-            {
-                data = new Dictionary<string, int[]>();
-                font = new Texture(path2, TextureMinFilter.Nearest, TextureMagFilter.Nearest);
-                Bitmap b = new Bitmap(path2);
-                using (StreamReader file = new StreamReader(path))
-                {
-                    fontWidth = b.Width;
-                    string ln;
-                    List<int> ids = new List<int>();
-                    List<int> xs = new List<int>();
-                    List<int> ys = new List<int>();
-                    List<int> widths = new List<int>();
-                    List<int> heights = new List<int>();
-
-
-                    while ((ln = file.ReadLine()) != null)
-                    {
-                        if (ln.Substring(0, 5) == "char ")
-                        {
-                            string Data = ln.Substring(5);
-                            string[] d = Data.Split(" ");
-                            List<int> f = new List<int>();
-                            foreach (string l in d)
-                            {
-                                if (l.Contains("="))
-                                {
-                                    string[] newL = l.Split("=");
-                                    Regex.Replace(newL[1], @"\s+", "");
-                                    f.Add(int.Parse(newL[1]));
-                                }
-                            }
-                            ids.Add(f[0]);
-                            xs.Add(f[1]);
-                            ys.Add(-(f[2] - fontWidth));
-                            widths.Add(f[3]);
-                            heights.Add(f[4]);
-                        }
-                    }
-
-                    data.Add("ids", ids.ToArray());
-                    data.Add("xs", xs.ToArray());
-                    data.Add("ys", ys.ToArray());
-                    data.Add("widths", widths.ToArray());
-                    data.Add("heights", heights.ToArray());
-                    file.Close();
-                }
-            }
-
-            public void Dispose()
-            {
-                GL.DeleteTexture(font.Handle);
-            }
-
-        }
+      public Font(string path, string path2)
+      {
+        this.data = new Dictionary<string, int[]>();
+        this.font = new Texture(path2, TextureMinFilter.Nearest, TextureMagFilter.Nearest);
+        using (StreamReader streamReader = new StreamReader(path))
+        {
+          this.fontWidth = new Bitmap(path2).Width;
+          List<int> intList1 = new List<int>();
+          List<int> intList2 = new List<int>();
+          List<int> intList3 = new List<int>();
+          List<int> intList4 = new List<int>();
+          List<int> intList5 = new List<int>();
+          string str1;
+          while ((str1 = streamReader.ReadLine()) != null)
+          {
+            if (str1.Substring(0, 5) == "char ")
+            {
+              string[] strArray1 = str1.Substring(5).Split(" ");
+              List<int> intList6 = new List<int>();
+              foreach (string str2 in strArray1)
+              {
+                if (str2.Contains("="))
+                {
+                  string[] strArray2 = str2.Split("=");
+                  Regex.Replace(strArray2[1], "\\s+", "");
+                  intList6.Add(int.Parse(strArray2[1]));
+                }
+              }
+              intList1.Add(intList6[0]);
+              intList2.Add(intList6[1]);
+              intList3.Add(-(intList6[2] - this.fontWidth));
+              intList4.Add(intList6[3]);
+              intList5.Add(intList6[4]);
+            }
+          }
+          this.data.Add("ids", intList1.ToArray());
+          this.data.Add("xs", intList2.ToArray());
+          this.data.Add("ys", intList3.ToArray());
+          this.data.Add("widths", intList4.ToArray());
+          this.data.Add("heights", intList5.ToArray());
+          streamReader.Close();
+        }
+      }
 
-        
-
-        public int getPhraseLength(string text, int px, Font f)
-        {
-            byte[] ids = Encoding.ASCII.GetBytes(text);
-            int xoff = 0;
-            foreach (byte b in ids)
-            {
-                int i = Array.IndexOf(f.data["ids"], b);
-                int width = (int)(((float)px / (float)f.data["heights"][i]) * f.data["widths"][i]);
-
-                xoff += width;
-            }
-            return xoff;
-        }
-
-        public Settings set = new Settings();
-
-        public void showSettings(Settings s)
-        {
-            var w = Convert.ToInt32(s.settings["width"]);
-            var h = Convert.ToInt32(s.settings["height"]);
-            Vector2 pos = new Vector2((Width - w) / 2, (Height - h) / 2);
-            if (Convert.ToBoolean(s.settings["useTexture"]))
-            {
-                var path = Convert.ToString(s.settings["texturePath"]);
-                drawTexturedRectangle(pos.X, pos.Y, 0, 0, pos.X + w, pos.Y + h, 1, 1, path, Color4.White, TextureMinFilter.Nearest, TextureMagFilter.Nearest);
-            }
-            else
-            {
-                Color4 col = new Color4(Convert.ToInt32(s.settings["r"]), Convert.ToInt32(s.settings["g"]), Convert.ToInt32(s.settings["b"]), Convert.ToInt32(s.settings["a"]));
-                drawRectangle(pos.X, pos.Y, pos.X + w, pos.Y + h, col);
-            }
-            foreach (Settings.Button b in s.buttons)
-            {
-                var x = b.pos.X + pos.X;
-                var y = b.pos.Y + pos.Y;
-                drawRectangle(x, y, x + b.width, y + b.height, b.col);
-                if(b.l == -1)
-                {
-                    b.l = getPhraseLength(b.Text, Math.Min(b.height, 32), b.font);
-                }
-                drawText(b.Text, Math.Min(b.height, 32), x + ((b.width - b.l) / 2), y + ((b.height - Math.Min(b.height, 32)) / 2), b.font, Color4.White);
-                b.setCol(Color4.Blue);
-
-            }
-        }
+      public void Dispose() => GL.DeleteTexture(this.font.Handle);
+    }
 
-        public class Settings
-        {
-            public List<Button> buttons = new List<Button>();
-            public Dictionary<string, object> settings = new Dictionary<string, object>();
+    public class Settings
+    {
+      public List<MainRenderWindow.Settings.Button> buttons = new List<MainRenderWindow.Settings.Button>();
+      public Dictionary<string, object> settings = new Dictionary<string, object>();
 
-            public class Button
-            {
-                public Vector2 pos;
-                public string Text;
-                public int width, height, l;
-                public Func<object> onClick;
-                public Color4 col;
-                public Font font;
-
-                public void setCol(Color4 c)
-                {
-                    col = c;
-                }
-            }
+      public void addButton(
+        string t,
+        float x,
+        float y,
+        int w,
+        int h,
+        Color4 c,
+        Func<object> func,
+        MainRenderWindow.Font f)
+      {
+        this.buttons.Add(new MainRenderWindow.Settings.Button()
+        {
+          pos = new Vector2(x, y),
+          width = w,
+          height = h,
+          onClick = func,
+          col = c,
+          Text = t,
+          l = -1,
+          font = f
+        });
+      }
 
-            public void addButton(string t, float x, float y, int w, int h, Color4 c, Func<object> func, Font f)
-            {
-                buttons.Add(new Button { pos = new Vector2(x, y), width = w, height = h, onClick = func, col = c, Text = t, l = -1 , font = f});
-            }
-
-            public void addSetting(string key, object value)
-            {
-                settings.Add(key, value);
-            }
+      public void addSetting(string key, object value) => this.settings.Add(key, value);
 
-            public void readSettings()
-            {
-                try
-                {
-                    using (StreamReader file = new StreamReader("settings.cfg"))
-                    {
-                        settings = new Dictionary<string, object>();
-                        string ln;
-                        while ((ln = file.ReadLine()) != null)
-                        {
-                            if (ln[0] != '#')
-                            {
-                                var values = ln.Split("=");
-                                Regex rx = new Regex(@"^[\d.]+$");
-                                if (rx.IsMatch(values[1]))
-                                {
-
-                                    settings.Add(values[0], float.Parse(values[1]));
-                                }
-                                else
-                                {
-                                    settings.Add(values[0], values[1]);
-                                }
-                            }
-                            
-
-                        }
-                    }
-                }
-                catch (InvalidCastException e)
-                {
-                    Console.WriteLine(e.GetBaseException());
-                }
-            }
+      public void readSettings()
+      {
+        try
+        {
+          using (StreamReader streamReader = new StreamReader("settings.cfg"))
+          {
+            this.settings = new Dictionary<string, object>();
+            string str;
+            while ((str = streamReader.ReadLine()) != null)
+            {
+              string[] strArray = str.Split("=");
+              if (new Regex("^[\\d.]+$").IsMatch(strArray[1]))
+                this.settings.Add(strArray[0], (object) float.Parse(strArray[1]));
+              else
+                this.settings.Add(strArray[0], (object) strArray[1]);
+            }
+          }
+        }
+        catch (InvalidCastException ex)
+        {
+          Console.WriteLine((object) ex.GetBaseException());
+        }
+      }
 
-            public void writeSettings()
-            {
-                try
-                {
-                    using (FileStream fs = File.Create("settings.cfg"))
-                    {
-                        string final = "";
-
-                        foreach (KeyValuePair<string, object> entry in settings)
-                        {
-                            final += entry.Key + "=" + entry.Value + "\n";
-                        }
-
-                        byte[] info = new UTF8Encoding(true).GetBytes(final);
-                        fs.Write(info, 0, info.Length);
-                    }
-                }
-
-                catch (Exception ex)
-                {
-                    Console.WriteLine(ex.ToString());
-                }
-            }
+      public void writeSettings()
+      {
+        try
+        {
+          using (FileStream fileStream = File.Create("settings.cfg"))
+          {
+            string s = "";
+            foreach (KeyValuePair<string, object> setting in this.settings)
+              s = s + setting.Key + "=" + setting.Value?.ToString() + "\n";
+            byte[] bytes = new UTF8Encoding(true).GetBytes(s);
+            fileStream.Write(bytes, 0, bytes.Length);
+          }
+        }
+        catch (Exception ex)
+        {
+          Console.WriteLine(ex.ToString());
+        }
+      }
 
-        }
-        private void checkClicks(Settings s)
-        {
-            var w = Convert.ToInt32(s.settings["width"]);
-            var h = Convert.ToInt32(s.settings["height"]);
-            foreach (Settings.Button b in s.buttons)
-            {
-                Vector2 pos = new Vector2((Width - w) / 2, (Height - h) / 2);
-                var mouseState = Mouse.GetCursorState();
-                var x = mouseState.X - X - 8 - pos.X;
-                var y = -(mouseState.Y - Y - 30 - Height) - pos.Y;
-                if (x >= b.pos.X && x <= b.pos.X + b.width && y >= b.pos.Y && y <= b.pos.Y + b.height)
-                {
-                    b.setCol(Color4.Red);
-                    b.onClick.Invoke();
-                }
-            }
-        }    
-
-    }
+      public class Button
+      {
+        public Vector2 pos;
+        public string Text;
+        public int width;
+        public int height;
+        public int l;
+        public Func<object> onClick;
+        public Color4 col;
+        public MainRenderWindow.Font font;
+
+        public void setCol(Color4 c) => this.col = c;
+      }
+    }
+  }
 }
